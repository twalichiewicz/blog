<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Thomas Walichiewicz</title>
    <link>https://twalichiewicz.github.io/</link>
    
    <atom:link href="https://twalichiewicz.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Thomas Walichiewicz - Designer, Developer, Thinker</description>
    <pubDate>Sat, 01 Nov 2025 08:55:11 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Look, another AI browser</title>
      <link>https://twalichiewicz.github.io/2025/10/23/Look-another-AI-browser/</link>
      <guid>https://twalichiewicz.github.io/2025/10/23/Look-another-AI-browser/</guid>
      <pubDate>Thu, 23 Oct 2025 11:13:19 GMT</pubDate>
      
      
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/10/23/Look-another-AI-browser/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Apple Gaming Strategy</title>
      <link>https://twalichiewicz.github.io/2025/10/11/Apple-Gaming-Strategy/</link>
      <guid>https://twalichiewicz.github.io/2025/10/11/Apple-Gaming-Strategy/</guid>
      <pubDate>Sat, 11 Oct 2025 14:14:09 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Apple’s gaming strategy is so bizarre. Early on it basically was the platform for gaming (remember when Halo was previewed at MacWorld? (</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Apple’s gaming strategy is so bizarre. Early on it basically was the platform for gaming (remember when Halo was previewed at MacWorld? (What sort of weird alternate timeline would we have had if Apple bought it instead of Microsoft? Would there even be an Xbox?)) and it again regained that title, but as a side effect of the iPhone’s portable-but-powerful platform.</p><p>But their current strategy seems lacking.</p><ul><li>Why isn’t there an integration with Steam? You’re not getting around the fact that people have huge collections of purchases on that platform, so having some way to not double-purchase by linking your Steam and App Store accounts would already help.</li><li>This new Games app is basically just the App Store but pared down without the junk.</li><li>Why doesn’t Apple have an in-house porting team? If a company like Nightdive can come in and fill the gap by porting classic titles to modern platforms, I’m sure Apple could pull their weight to help convince developers.</li></ul><p>People always mention how macOS isn’t a large enough platform to justify developing games for it, but I’d argue that if more games supported it (and ran well), why would anyone want to have to buy both a Mac and a PC? They could accelerate this effort by taking a similar strategy to what Sony did to reverse their fortunes in the 360&#x2F;PS3 era—find the top-tier, critically acclaimed games and port those to macOS. That alone would shift the conversation to “Well, with a Mac I’ll always be able to play the top games, but maybe I miss out on the random indie stuff.”</p>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/10/11/Apple-Gaming-Strategy/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>The awe keeps dropping</title>
      <link>https://twalichiewicz.github.io/2025/09/16/The-awe-keeps-dropping/</link>
      <guid>https://twalichiewicz.github.io/2025/09/16/The-awe-keeps-dropping/</guid>
      <pubDate>Tue, 16 Sep 2025 02:37:35 GMT</pubDate>
      
      
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/09/16/The-awe-keeps-dropping/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Claude will now train on your chats by default</title>
      <link>https://twalichiewicz.github.io/2025/08/28/Anthropic-user-data-choice/</link>
      <guid>https://twalichiewicz.github.io/2025/08/28/Anthropic-user-data-choice/</guid>
      <pubDate>Thu, 28 Aug 2025 16:45:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Starting to smell a little like enshittification.&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Starting to smell a little like enshittification.</p>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/08/28/Anthropic-user-data-choice/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Late is just for a little while, suck is forever</title>
      <link>https://twalichiewicz.github.io/2025/08/23/Late-is-just-for-a-little-while-suck-is-forever/</link>
      <guid>https://twalichiewicz.github.io/2025/08/23/Late-is-just-for-a-little-while-suck-is-forever/</guid>
      <pubDate>Sat, 23 Aug 2025 10:00:00 GMT</pubDate>
      
      <description>Gabe Newell&#39;s timeless wisdom on prioritizing quality over deadlines.</description>
      
      
      
      <content:encoded><![CDATA[<iframe   class="youtube-video"  style="width:100%;height:300px;"  src="https://www.youtube-nocookie.com/embed/lA1H_GycBTE"   title="Gabe Newell - Late is just for a little while, suck is forever"  frameborder="0"   allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"   allowfullscreen  loading="lazy"  referrerpolicy="strict-origin-when-cross-origin"></iframe>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      <category domain="https://twalichiewicz.github.io/blog/tags/musing/">musing</category>
      
      <category domain="https://twalichiewicz.github.io/blog/tags/development/">development</category>
      
      <category domain="https://twalichiewicz.github.io/blog/tags/quality/">quality</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/08/23/Late-is-just-for-a-little-while-suck-is-forever/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Great designers are scarce</title>
      <link>https://twalichiewicz.github.io/2025/08/15/Great-designers-scarcity/</link>
      <guid>https://twalichiewicz.github.io/2025/08/15/Great-designers-scarcity/</guid>
      <pubDate>Fri, 15 Aug 2025 10:00:00 GMT</pubDate>
      
      <description>A reflection on the scarcity and value of truly great designers.</description>
      
      
      
      <content:encoded><![CDATA[<p><img src="/2025/08/15/Great-designers-scarcity/great-designers-tweet.jpg" alt="Benji Taylor tweet about designer scarcity"></p>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      <category domain="https://twalichiewicz.github.io/blog/tags/design/">design</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/08/15/Great-designers-scarcity/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>The End of Command-Based Computing</title>
      <link>https://twalichiewicz.github.io/2025/08/09/The-End-of-Command-Based-Computing/</link>
      <guid>https://twalichiewicz.github.io/2025/08/09/The-End-of-Command-Based-Computing/</guid>
      <pubDate>Sat, 09 Aug 2025 12:00:00 GMT</pubDate>
      
      <description>After fifty years of telling computers what to do, I&#39;m building WorkspaceOS—software that observes your work patterns and acts on them without being asked. Here&#39;s what anticipatory computing looks like in practice.</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="A-50-Year-Old-Assumption"><a href="#A-50-Year-Old-Assumption" class="headerlink" title="A 50-Year-Old Assumption"></a>A 50-Year-Old Assumption</h2><p>In 1975, when Bill Gates and Paul Allen created BASIC for the Altair 8800, they made a reasonable choice: computers would wait for human commands. This made sense. Computers were tools, like hammers or typewriters. You tell them what to do, they do it.</p><p>But somewhere along the way, we stopped questioning whether this should remain true. We’ve spent fifty years making commands easier—GUIs, voice assistants, chatbots—without asking if commands themselves are the problem.</p><p>Here’s what this has cost us: According to Asana’s 2023 study of 9,615 knowledge workers, we spend 58% of our workday on “work about work.” Not creating. Not solving. Just coordinating. Research shows we waste nearly a full workday each week just searching for information. Those juggling 16 or more apps could save almost 10 hours weekly through better processes. We’ve built a $50 trillion global economy where most work isn’t work at all.</p><h2 id="What-I’m-Building"><a href="#What-I’m-Building" class="headerlink" title="What I’m Building"></a>What I’m Building</h2><p>I’m developing WorkspaceOS—software that observes patterns in how you work and begins acting on them without being asked. Not automation (which follows preset rules), but pattern recognition that compounds over time.</p><p>Here’s how it works:</p><p>WorkspaceOS uses computer vision to understand what’s on your screen—no API integrations needed. This means it works with legacy enterprise software, brand new tools, and everything in between. Processing happens locally on your device, your data never leaves your control. The system observes sequences of actions and their contexts: when I check the same three log files whenever our payment system throws errors, it learns to pre-fetch and highlight relevant sections when similar errors occur. When I switch between projects and open our analytics dashboard after modifying the pricing model, it knows I’m checking for impact and prepares the relevant comparisons without being asked.</p><p>Instead of sending every action to expensive cloud models, WorkspaceOS caches learned patterns locally. First time WorkspaceOS sees a pattern: $0.10. Every time after: $0.001. This isn’t a discount—it’s architectural. The system gets more valuable with use, not through updates, but through interaction.</p><h2 id="Three-Key-Capabilities"><a href="#Three-Key-Capabilities" class="headerlink" title="Three Key Capabilities"></a>Three Key Capabilities</h2><style>.pillars-container {  margin: 1.5rem auto;  max-width: 65ch;  position: relative;}.pillar {  margin: 2rem 0;  position: relative;  padding-left: 3.5rem;}.pillar-number {  position: absolute;  left: 3px;  top: -6px;  width: 36px;  height: 36px;  background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);  border: 2px solid rgba(255, 255, 255, 0.1);  border-radius: 50%;  display: flex;  align-items: center;  justify-content: center;  font-weight: 900;  font-size: 1.1rem;  color: white;  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);}.pillar-title {  font-size: 1.3rem;  font-weight: 700;  line-height: 111%;  margin-bottom: 3px;  color: var(--text-primary);  letter-spacing: -0.02em;}.pillar-subtitle {  font-size: 12px;  text-transform: uppercase;  letter-spacing: 0.08em;  opacity: 0.6;  margin-bottom: 0;  font-weight: 600;}.pillar-content {  margin-top: 9px;  line-height: 1.5;  color: var(--text-secondary);}.pillar-highlight {  background: linear-gradient(120deg, #374151 0%, #1f2937 100%);  -webkit-background-clip: text;  -webkit-text-fill-color: transparent;  background-clip: text;  font-weight: 700;}@media (prefers-color-scheme: dark) {  .pillar-number {    background: linear-gradient(135deg, #0f0f0f 0%, #1f1f1f 100%);    border: 2px solid rgba(255, 255, 255, 0.2);    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);  }  .pillar-highlight {    background: linear-gradient(120deg, #ffffff 0%, #d1d5db 100%);    -webkit-background-clip: text;    -webkit-text-fill-color: transparent;    background-clip: text;  }}@media (max-width: 768px) {  .pillar {    padding-left: 3rem;  }  .pillar-number {    width: 32px;    height: 32px;    font-size: 1rem;  }}</style><div class="pillars-container"><div class="pillar"><div class="pillar-number">1</div><div class="pillar-title">Universal Compatibility</div><div class="pillar-subtitle">Works with any software</div><div class="pillar-content">Computer vision at the OS level means it works with any application on your screen. No integrations needed—ever. <span class="pillar-highlight">Works with legacy and new software alike.</span></div></div><div class="pillar"><div class="pillar-number">2</div><div class="pillar-title">Pattern Recognition</div><div class="pillar-subtitle">Learns from repetition</div><div class="pillar-content">Every action is connected across time. Pattern recognition across time reveals intent before you express it. <span class="pillar-highlight">Your work history becomes predictive intelligence.</span></div></div><div class="pillar"><div class="pillar-number">3</div><div class="pillar-title">Local Processing</div><div class="pillar-subtitle">Gets cheaper with use</div><div class="pillar-content">Cached patterns eliminate expensive API calls for repeated tasks. <span class="pillar-highlight">Costs drop from $0.10 to $0.001 through pattern caching.</span></div></div></div><style>.limitations {  font-size: 9px;  opacity: 0.6;  max-width: 81ch;  margin: 0 auto 3rem auto;  line-height: 1.4;}</style><div class="limitations"><strong>Current Limitations:</strong> WorkspaceOS learns from patterns, which means it can't handle completely novel situations without references. It removes friction, not judgment. Privacy-preserving pattern sharing between users is still in research—your patterns stay yours for now.</div><h2 id="The-Trajectory"><a href="#The-Trajectory" class="headerlink" title="The Trajectory"></a>The Trajectory</h2><p>Right now, WorkspaceOS reduces my coordination overhead by about 40%. That’s real, measured by time tracking my own workflows before and after implementation. Not revolutionary yet, but meaningful. The interesting part isn’t the current state—it’s the compound effect. Every pattern learned makes the next pattern easier to recognize. Every workflow understood enables more complex anticipation. The system I’m using today is noticeably smarter than six months ago, without any architectural changes. When this approach matures, work changes fundamentally. Not because entire professions disappear, but because the friction between intention and execution evaporates. You stop being a command-line interface for your computer and start doing what you were actually hired to do. The command paradigm that has defined computing for fifty years doesn’t need evolution. It needs retirement.</p><p><strong><a href="https://tryworkspaceos.com/">WorkspaceOS</a></strong></p><p><em>Currently in development. Early access opening soon.</em></p>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      <category domain="https://twalichiewicz.github.io/blog/tags/AI/">AI</category>
      
      <category domain="https://twalichiewicz.github.io/blog/tags/vision/">vision</category>
      
      <category domain="https://twalichiewicz.github.io/blog/tags/WorkspaceOS/">WorkspaceOS</category>
      
      <category domain="https://twalichiewicz.github.io/blog/tags/computing/">computing</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/08/09/The-End-of-Command-Based-Computing/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WorkspaceOS</title>
      <link>https://twalichiewicz.github.io/2025/08/06/Introducing-WorkspaceOS/</link>
      <guid>https://twalichiewicz.github.io/2025/08/06/Introducing-WorkspaceOS/</guid>
      <pubDate>Wed, 06 Aug 2025 10:00:00 GMT</pubDate>
      
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/categories/announcements/">announcements</category>
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      <category domain="https://twalichiewicz.github.io/blog/tags/product-launch/">product launch</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/08/06/Introducing-WorkspaceOS/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>detoured</title>
      <link>https://twalichiewicz.github.io/2025/07/28/detoured/</link>
      <guid>https://twalichiewicz.github.io/2025/07/28/detoured/</guid>
      <pubDate>Mon, 28 Jul 2025 19:41:36 GMT</pubDate>
      
        
        
      <description>&lt;video autoplay loop muted playsinline style=&quot;width: 100%; height: auto; margin: 24px 0; border-radius: 15px; box-shadow: 0 4px 6px rgba(0, </description>
        
      
      
      
      <content:encoded><![CDATA[<video autoplay loop muted playsinline style="width: 100%; height: auto; margin: 24px 0; border-radius: 15px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">  <source src="/2025/07/28/detoured/detoured-safari.mp4" type="video/mp4; codecs=avc1.42E01E,mp4a.40.2">  <source src="/2025/07/28/detoured/detoured-compatible.webm" type="video/webm">  <source src="/2025/07/28/detoured/detoured-compatible.mp4" type="video/mp4">  Your browser does not support the video tag.</video>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/07/28/detoured/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Designing Forward: Rethinking How Users Reach Success in AI-Powered Builders</title>
      <link>https://twalichiewicz.github.io/2025/07/23/Designing-Forward-AI-Powered-Builders/</link>
      <guid>https://twalichiewicz.github.io/2025/07/23/Designing-Forward-AI-Powered-Builders/</guid>
      <pubDate>Wed, 23 Jul 2025 15:00:00 GMT</pubDate>
      
      <description>The real UX bottleneck isn&#39;t the model, it&#39;s the conversation.</description>
      
      
      
      <content:encoded><![CDATA[<p>When I was invited to an onsite at Replit, the design challenge they posed was simple on paper:</p><p><span style="font-style: italic; font-size: 15px;">“How might we help users reach a successful outcome faster?”</span></p><p>In practice, that question cuts to the heart of a major problem in AI-native creation tools. Users enter a vague idea, hit “Build,” and are met with silence or a failed attempt. They’re not just asking a system to generate code, they’re trying to collaborate with something that gives them no real sense of whether it understood what they meant.</p><p>During that onsite, I spent the day mapping out the problem, pinpointing the breakdowns, and sketching a layered system that could guide users more effectively. Some of what I proposed now appears in their product. Whether that’s correlation or causation isn’t really the point. The ideas are out there now, and the bigger conversation is overdue.</p><p>So I’m publishing my original thinking here—not just to timestamp it, but to push the discussion forward. This isn’t just a Replit problem. Teams at OpenAI, Meta, Apple Intelligence, Perplexity, and DeepMind are all navigating the same underlying issue.</p><h2 id="The-Core-Problem-Prompt-in-failure-out"><a href="#The-Core-Problem-Prompt-in-failure-out" class="headerlink" title="The Core Problem: Prompt-in, failure-out"></a>The Core Problem: Prompt-in, failure-out</h2><p>Most AI builders start with a blank prompt box and a “Build” button. That’s it. The assumptions are:</p><ul><li>Users know what to say</li><li>The system will know what to do with it</li><li>If something breaks, the user will know how to fix it</li></ul><p>But in reality, especially for non-technical users, it goes more like this:</p><ul><li>The system misinterprets the request</li><li>The output is broken or misaligned</li><li>The user has no idea what went wrong or how to adjust</li></ul><p>After two or three failed attempts, people bounce.</p><h2 id="The-Deeper-Issue-It’s-not-the-engine-it’s-the-mapping"><a href="#The-Deeper-Issue-It’s-not-the-engine-it’s-the-mapping" class="headerlink" title="The Deeper Issue: It’s not the engine, it’s the mapping"></a>The Deeper Issue: It’s not the engine, it’s the mapping</h2><p>Models aren’t the problem. The real issue is that most AI tools have no translation layer between human intention and system execution. There’s no mechanism for negotiation, no signal about whether the system understands, and no scaffolding to help the user refine what they meant.</p><p>It’s like trying to build something with a team member who never asks questions and never says what they’re thinking.</p><p>We need to stop designing prompts as one-way input and start treating them like a two-way conversation.</p><h2 id="The-Solution-I-Proposed-A-Layered-UX-System-for-Clarity-and-Feedback"><a href="#The-Solution-I-Proposed-A-Layered-UX-System-for-Clarity-and-Feedback" class="headerlink" title="The Solution I Proposed: A Layered UX System for Clarity and Feedback"></a>The Solution I Proposed: A Layered UX System for Clarity and Feedback</h2><p>I presented a design framework structured around four key elements. The goal was simple—help users move from ambiguity to alignment before anything is built.</p><h3 id="1-Inline-Prompt-Validation"><a href="#1-Inline-Prompt-Validation" class="headerlink" title="1. Inline Prompt Validation"></a>1. Inline Prompt Validation</h3><p>As users type, the system evaluates what they’re saying and offers suggestions or clarifying questions.</p><ul><li>“Try adding more detail about the UI”</li><li>“Looks like you’re building a CRUD app, what’s the data model?”</li><li>“Ambiguous term detected, did you mean X or Y?”</li></ul><p>This doesn’t interrupt the flow, it enhances it.</p><h3 id="2-Mini-Agent-Co-Pilot"><a href="#2-Mini-Agent-Co-Pilot" class="headerlink" title="2. Mini-Agent Co-Pilot"></a>2. Mini-Agent Co-Pilot</h3><p>A lightweight background agent continuously parses the prompt, offering micro-interventions where needed.</p><p>Think of it like a PM in your input box—flagging blockers, suggesting reusable templates, and steering you before you go off-course.</p><h3 id="3-Confidence-Meter-on-the-Build-Button"><a href="#3-Confidence-Meter-on-the-Build-Button" class="headerlink" title="3. Confidence Meter on the Build Button"></a>3. Confidence Meter on the Build Button</h3><p>Instead of a binary “Build” button, show a signal about how confident the system is in its ability to generate something viable.</p><p>It lowers anxiety, builds trust, and teaches users what kind of input leads to better results.</p><h3 id="4-Netflix-Style-Preview-Cards"><a href="#4-Netflix-Style-Preview-Cards" class="headerlink" title="4. Netflix-Style Preview Cards"></a>4. Netflix-Style Preview Cards</h3><p>Above the prompt, surface 2–3 interpretations of what the system thinks the user wants to make.</p><ul><li>A chat app with login and chatroom</li><li>A note-taking app with tags and markdown</li><li>A portfolio site with sections and deployment config</li></ul><p>This gives users something tangible to react to, helping them clarify their own intent.</p><h2 id="The-Long-Term-Vision-Parallel-Agents-for-Real-Time-Collaboration"><a href="#The-Long-Term-Vision-Parallel-Agents-for-Real-Time-Collaboration" class="headerlink" title="The Long-Term Vision: Parallel Agents for Real-Time Collaboration"></a>The Long-Term Vision: Parallel Agents for Real-Time Collaboration</h2><p>The four-pillar system above is a strong MVP. But what really unlocks long-term value is rethinking the architecture altogether—not just how the interface guides users, but how the system thinks alongside them.</p><p>In the vision I sketched, the future of AI-powered builders isn’t a single black box that you prompt and hope for the best. It’s a collaborative system where multiple AI agents operate in parallel—each specializing in a distinct layer of the software creation process, just like real product teams.</p><h3 id="A-The-Lightweight-Agent-Your-Product-Strategist-in-the-Loop"><a href="#A-The-Lightweight-Agent-Your-Product-Strategist-in-the-Loop" class="headerlink" title="A. The Lightweight Agent: Your Product Strategist in the Loop"></a>A. The Lightweight Agent: Your Product Strategist in the Loop</h3><p>This agent’s job isn’t to build. It’s to understand, scope, prioritize, and clarify.<br>It constantly monitors what the user is trying to achieve and translates that intent into something actionable. Think of it as:</p><ul><li>Asking timely clarification questions</li><li>Reframing vague goals into concrete features</li><li>Flagging risky assumptions early</li><li>Helping the user refine what done looks like</li></ul><p>It’s the AI equivalent of a good product manager or tech lead—someone who doesn’t just nod and build, but asks, “What problem are we actually solving?”</p><p>This agent could live in the prompt input itself, or as a side-thread&#x2F;chat layer that occasionally taps the user on the shoulder with questions like:</p><ul><li>“Are user accounts required?”</li><li>“Would you like to store data locally or in the cloud?”</li><li>“Do you want to start with a scaffolded UI or raw code?”</li></ul><p>The point isn’t just to fill gaps—it’s to make sure the user is solving the right problem in the right way.</p><h3 id="B-The-Heavyweight-Agent-Your-Builder-Deployer-and-Debugger"><a href="#B-The-Heavyweight-Agent-Your-Builder-Deployer-and-Debugger" class="headerlink" title="B. The Heavyweight Agent: Your Builder, Deployer, and Debugger"></a>B. The Heavyweight Agent: Your Builder, Deployer, and Debugger</h3><p>Once intent is clear, the second agent takes over execution—handling everything from scaffold generation to deployment to runtime configuration. It doesn’t just generate code, it operationalizes it.</p><p>Its responsibilities might include:</p><ul><li>Translating the scoped request into clean, runnable code</li><li>Creating project structure and config files</li><li>Spinning up development environments or preview links</li><li>Surfacing build-time errors in a human-readable way</li><li>Offering next steps (e.g. “add login,” “connect to database”)</li></ul><p>If the lightweight agent is the thinker, the heavyweight agent is the doer.</p><h3 id="Why-Parallelism-Matters"><a href="#Why-Parallelism-Matters" class="headerlink" title="Why Parallelism Matters"></a>Why Parallelism Matters</h3><p>In most tools today, this kind of division doesn’t exist. The system either builds or doesn’t. It doesn’t negotiate, doesn’t clarify, and certainly doesn’t improve mid-stream.</p><p>But real product teams work in parallel. Strategy and execution feed into each other continuously. Questions are raised and resolved as part of the flow, not as separate stages. This is what makes collaboration fast, effective, and adaptable.</p><p>Bringing that dynamic into AI-native tooling means:</p><ul><li>Fewer dead-ends, because ambiguity gets resolved up front</li><li>Higher success rates, because output is based on clarified goals</li><li>More user learning, because the system explains itself as it goes</li></ul><p>Eventually, this dual-agent system could be extended even further: with a design agent for UI scaffolding, a data agent for schema management, or a QA agent for test coverage and performance optimization. But the core starts with two minds—thinking and building—working together in real time.</p><h2 id="Why-This-Matters"><a href="#Why-This-Matters" class="headerlink" title="Why This Matters"></a>Why This Matters</h2><p>AI-native builders have the potential to fundamentally change how software gets created. But they’ll only reach that potential if we stop treating the user experience as a secondary concern.</p><p>The frontier isn’t more horsepower. It’s better conversation.</p><p>If the system doesn’t clarify, guide, or explain, then intent gets lost, trust breaks down, and even the best model won’t be able to deliver.</p>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      <category domain="https://twalichiewicz.github.io/blog/tags/design/">design</category>
      
      <category domain="https://twalichiewicz.github.io/blog/tags/AI/">AI</category>
      
      <category domain="https://twalichiewicz.github.io/blog/tags/product-design/">product-design</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/07/23/Designing-Forward-AI-Powered-Builders/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>apple music needs session memory</title>
      <link>https://twalichiewicz.github.io/2025/07/18/apple-music-needs-session-memory/</link>
      <guid>https://twalichiewicz.github.io/2025/07/18/apple-music-needs-session-memory/</guid>
      <pubDate>Fri, 18 Jul 2025 13:46:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Apple Music’s autoplay feature would be so much better if it remembered what you’ve already heard in your current session. Nothing worse </description>
        
      
      
      
      <content:encoded><![CDATA[<p>Apple Music’s autoplay feature would be so much better if it remembered what you’ve already heard in your current session. Nothing worse than it queuing up the same “recommended” songs that just played 30 minutes ago when you were in a different playlist.</p><p>Maybe keep track of the last 50 songs played? Just a thought.</p>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/07/18/apple-music-needs-session-memory/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Deploy at Scale demo now live</title>
      <link>https://twalichiewicz.github.io/2025/07/08/custom-install-demo-announcement/</link>
      <guid>https://twalichiewicz.github.io/2025/07/08/custom-install-demo-announcement/</guid>
      <pubDate>Tue, 08 Jul 2025 00:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Took a little while, but I’ve added inline demoes to the Works page! Started with one of the tricker ones, &lt;a href=&quot;javascript:void(0)&quot; o</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Took a little while, but I’ve added inline demoes to the Works page! Started with one of the tricker ones, <a href="javascript:void(0)" onclick="if (window.location.pathname === '/') { if (window.mobileTabs && window.mobileTabs.switchTab) { window.mobileTabs.switchTab('portfolio', true); } setTimeout(() => { const customInstall = document.querySelector('a[href*=&quot;Custom-Install&quot;]'); if (customInstall) { const projectsContent = document.getElementById('projectsContent'); if (projectsContent) { const rect = customInstall.getBoundingClientRect(); const containerRect = projectsContent.getBoundingClientRect(); const scrollTop = rect.top - containerRect.top + projectsContent.scrollTop - 100; projectsContent.scrollTo({ top: scrollTop, behavior: 'smooth' }); } } }, 300); } else { window.location.href = '/?tab=portfolio'; }">Custom Install</a> (look for the (DEMO) sticker).</p>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/07/08/custom-install-demo-announcement/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>YouTube timecode comments</title>
      <link>https://twalichiewicz.github.io/2025/06/25/YouTube-Timecode-Commentary/</link>
      <guid>https://twalichiewicz.github.io/2025/06/25/YouTube-Timecode-Commentary/</guid>
      <pubDate>Wed, 25 Jun 2025 15:30:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;What if YouTube borrowed SoundCloud’s timecode comments—letting viewers pin insights to exact moments?&lt;/p&gt;
&lt;p&gt;YouTube comments already le</description>
        
      
      
      
      <content:encoded><![CDATA[<p>What if YouTube borrowed SoundCloud’s timecode comments—letting viewers pin insights to exact moments?</p><p>YouTube comments already lean heavily on timestamps. Livestream VODs use third-party tools to overlay chat reactions. And if a user doesn’t want to see them? Just add a toggle in settings.</p><div class="code-sandbox-wrapper"      data-auto-init="true"     data-sandbox-id="sandbox-r9979ygpu"     data-auto-toggle="true"     data-suspend="true"     data-reset="false">  <div class="code-sandbox-content"><div class="youtube-demo" data-playing="false" data-current-time="5" data-duration="15" style="margin: 0; background: #0f0f0f; max-width: 100%; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif; border-radius: 8px; overflow: hidden; position: relative; box-shadow: 0 10px 30px rgba(0,0,0,0.15), inset 0 1px 0 rgba(255,255,255,0.1);">    <div style="position: relative; background: #000; padding-bottom: 56.25%; overflow: hidden;">    <img class="video-gif" src="/2025/06/25/YouTube-Timecode-Commentary/cat.gif" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; border-radius: 0; margin-top: 0; margin-bottom: 0; pointer-events: none; border: none;">        <!-- Comments are now displayed as tooltips on timeline markers -->        <!-- Tooltip container - separate from controls so they stay visible -->    <div class="tooltip-container" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; pointer-events: none; z-index: 20;">      <!-- Tooltips will be dynamically positioned here -->    </div>        <div class="controls-wrapper">      <div class="progress-bar" style="position: relative; width: 100%; height: 3px; background: rgba(255,255,255,0.3); margin-bottom: 8px;">        <div class="progress-fill" style="height: 100%; background: #ff0000; width: 33%; transition: width 0.1s linear; position: relative;">          <div style="position: absolute; right: -6px; top: -5px; width: 12px; height: 12px; background: #ff0000; border-radius: 50%; box-shadow: 0 0 0 4px rgba(255,0,0,0.2);"></div>        </div>        <!-- Timeline markers for all comments -->        <div class="timeline-marker" data-time="2" data-comment-id="1" data-username="@TomNook" data-full-text="Already vibing 🎶" style="position: absolute; left: 13.33%; top: -6px; width: 4px; height: 15px; background: #ffeb3b;"></div>        <div class="timeline-marker" data-time="4" data-comment-id="2" data-username="@CatLover2024" data-full-text="The way crumb bobs to the beat here is EVERYTHING 😸" style="position: absolute; left: 26.67%; top: -6px; width: 4px; height: 15px; background: #ffeb3b;"></div>        <div class="timeline-marker" data-time="6" data-comment-id="3" data-username="@NostalgicGamer" data-full-text="This takes me back to Saturday afternoons" style="position: absolute; left: 40%; top: -6px; width: 4px; height: 15px; background: #ffeb3b;"></div>                <!-- Dense cluster for popular section (8-10 seconds) -->        <div class="timeline-marker" data-time="8" data-comment-id="4" data-username="@VirtuallyVibe" data-full-text="HERE COMES THE BEST PART!! 🔥🔥🔥" style="position: absolute; left: 53.33%; top: -6px; width: 4px; height: 15px; background: #ffeb3b;"></div>        <div class="timeline-marker" data-time="9" data-comment-id="5" data-username="@DanceCat" data-full-text="My cat literally stopped what he was doing to dance" style="position: absolute; left: 60%; top: -6px; width: 4px; height: 15px; background: #ffeb3b;"></div>        <div class="timeline-marker" data-time="10" data-comment-id="6" data-username="@BeatDropper" data-full-text="This drop hits different at 2x speed 😤" style="position: absolute; left: 66.67%; top: -6px; width: 4px; height: 15px; background: #ffeb3b;"></div>        <div class="timeline-marker" data-time="13" data-comment-id="7" data-username="@MemeMaster" data-full-text="POV: It's 2008 and you're spending your allowance on Wii Points 🥲" style="position: absolute; left: 86.67%; top: -6px; width: 4px; height: 15px; background: #ffeb3b;"></div>      </div>            <div style="display: flex; align-items: center; justify-content: space-between;">        <div style="display: flex; align-items: center; gap: 12px;">          <button class="play-btn" style="background: none; border: none; color: white; padding: 0; display: flex; align-items: center; justify-content: center;">            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">              <path d="M8 5v14l11-7z"/>            </svg>          </button>          <button style="background: none; border: none; color: white; padding: 0; display: flex; align-items: center; justify-content: center;">            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">              <path d="M6 4l10 8L6 20V4z M18 4v16h2V4h-2z"/>            </svg>          </button>          <button style="background: none; border: none; color: white; padding: 0; display: flex; align-items: center; justify-content: center;">            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">              <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>            </svg>          </button>          <span class="time-display" style="color: white; font-size: 12px; margin-left: 8px;">0:05 / 0:15</span>        </div>                <div style="display: flex; align-items: center; gap: 8px;">          <button class="loop-btn" style="background: none; border: none; color: #ff0000; padding: 0; display: flex; align-items: center; justify-content: center;" title="Loop">            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">              <path d="M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"/>            </svg>          </button>          <button style="background: none; border: none; color: white; padding: 4px 8px; font-size: 13px; font-weight: 400;">CC</button>          <button class="settings-btn" style="background: none; border: none; color: white; padding: 0; position: relative; display: flex; align-items: center; justify-content: center;">            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">              <path d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/>            </svg>            <div class="settings-menu" style="position: absolute; bottom: 30px; right: 0; background: rgba(28,28,28,0.98); border-radius: 8px; padding: 8px 0; min-width: 260px; display: none; box-shadow: 0 2px 8px rgba(0,0,0,0.5);">              <div style="color: #aaa; font-size: 11px; padding: 8px 16px; border-bottom: 1px solid rgba(255,255,255,0.1);">Settings</div>              <div class="menu-item community-toggle" style="display: flex; justify-content: space-between; align-items: center; padding: 10px 16px; background: rgba(255,235,59,0.1);">                <span style="color: #ffeb3b; font-size: 14px;">Community Commentary</span>                <div class="toggle active" style="width: 36px; height: 20px; background: #ffeb3b; border-radius: 10px; position: relative; transition: background 0.2s;">                  <div style="width: 16px; height: 16px; background: #212121; border-radius: 50%; position: absolute; top: 2px; right: 2px; transition: all 0.2s;"></div>                </div>              </div>              <div class="menu-item" style="display: flex; justify-content: space-between; align-items: center; padding: 10px 16px;">                <span style="color: white; font-size: 14px;">Playback speed</span>                <span style="color: #aaa; font-size: 14px;">Normal ›</span>              </div>              <div class="menu-item" style="display: flex; justify-content: space-between; align-items: center; padding: 10px 16px;">                <span style="color: white; font-size: 14px;">Quality</span>                <span style="color: #aaa; font-size: 14px;">Auto ›</span>              </div>            </div>          </button>          <button style="background: none; border: none; color: white; padding: 0; display: flex; align-items: center; justify-content: center;">            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">              <path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/>            </svg>          </button>        </div>      </div>    </div>  </div>    <div class="video-info-section" style="padding: 12px 16px; border-bottom: 1px solid rgba(255,255,255,0.1);">    <h3 style="margin: 0 0 8px 0; font-size: 18px; font-weight: 600;">crumb cat dancing to wii shop music (15 second loop)</h3>    <div style="display: flex; align-items: center; justify-content: space-between;">      <div style="display: flex; align-items: center; gap: 8px; font-size: 14px;">        <span>847K views</span>        <span>•</span>        <span>3 months ago</span>      </div>      <button class="toggle-comments" style="background: transparent; border: 1px solid rgba(255,255,255,0.2); padding: 6px 12px; border-radius: 4px; font-size: 12px; display: flex; align-items: center; gap: 6px;">        <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">          <path d="M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18zM18 14H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"/>        </svg>        <span>Comments</span>      </button>    </div>  </div>    <!-- Comments Section -->  <div class="comments-section" style="display: none; border-top: 1px solid rgba(255,255,255,0.1); padding: 16px; max-height: 210px; overflow-y: auto;">    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">      <h4 style="margin: 0; font-size: 16px;">Comments</h4>      <select class="comment-sort" style="background: transparent; border: 1px solid rgba(255,255,255,0.2); border-radius: 4px; padding: 4px 8px; font-size: 12px; outline: none;">        <option value="newest">Newest</option>        <option value="timecode">By timecode</option>      </select>    </div>        <!-- Comment Input -->    <div class="comment-input-box" style="border-radius: 8px; padding: 12px; margin-bottom: 16px;">      <textarea class="comment-input" placeholder="Add a comment..." style="width: 100%; background: transparent; border: none; resize: none; font-family: inherit; font-size: 14px; line-height: 1.4; outline: none; overflow: hidden; transition: height 0.2s ease;" rows="1"></textarea>      <div class="comment-actions" style="display: none; justify-content: space-between; align-items: center; margin-top: 8px;">        <span class="comment-timecode" style="font-size: 12px;">@ 0:00</span>        <div style="display: flex; gap: 8px;">          <button class="comment-cancel" style="background: transparent; color: #909090; border: none; padding: 6px 16px; border-radius: 4px; font-size: 14px;">Cancel</button>          <button class="comment-submit" style="background: #065fd4; color: white; border: none; padding: 6px 16px; border-radius: 4px; font-size: 14px; opacity: 0.5;" disabled>Comment</button>        </div>      </div>    </div>        <!-- Comments List -->    <div class="comments-list">      <div class="comment-item" data-comment-id="1" data-time="2" style="padding: 12px 0; border-bottom: 1px solid rgba(255,255,255,0.1);">        <div style="display: flex; gap: 12px;">          <div style="width: 36px; height: 36px; background: #ff9800; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 16px; font-weight: 600; color: white; flex-shrink: 0;">T</div>          <div style="flex: 1;">            <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px;">              <span style="color: #f1f1f1; font-size: 13px; font-weight: 500;">@TomNook</span>              <a href="#" class="comment-time-link" data-time="2" style="color: #3ea6ff; font-size: 12px; text-decoration: none;">0:02</a>            </div>            <p style="color: #f1f1f1; font-size: 14px; margin: 0; line-height: 1.4;">Already vibing 🎶</p>          </div>        </div>      </div>            <div class="comment-item" data-comment-id="2" data-time="4" style="padding: 12px 0; border-bottom: 1px solid rgba(255,255,255,0.1);">        <div style="display: flex; gap: 12px;">          <div style="width: 36px; height: 36px; background: #ff6b6b; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 16px; font-weight: 600; color: white; flex-shrink: 0;">C</div>          <div style="flex: 1;">            <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px;">              <span style="color: #f1f1f1; font-size: 13px; font-weight: 500;">@CatLover2024</span>              <a href="#" class="comment-time-link" data-time="4" style="color: #3ea6ff; font-size: 12px; text-decoration: none;">0:04</a>            </div>            <p style="color: #f1f1f1; font-size: 14px; margin: 0; line-height: 1.4;">The way crumb bobs to the beat here is EVERYTHING 😸</p>          </div>        </div>      </div>            <div class="comment-item" data-comment-id="3" data-time="6" style="padding: 12px 0; border-bottom: 1px solid rgba(255,255,255,0.1);">        <div style="display: flex; gap: 12px;">          <div style="width: 36px; height: 36px; background: #2196f3; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 16px; font-weight: 600; color: white; flex-shrink: 0;">N</div>          <div style="flex: 1;">            <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px;">              <span style="color: #f1f1f1; font-size: 13px; font-weight: 500;">@NostalgicGamer</span>              <a href="#" class="comment-time-link" data-time="6" style="color: #3ea6ff; font-size: 12px; text-decoration: none;">0:06</a>            </div>            <p style="color: #f1f1f1; font-size: 14px; margin: 0; line-height: 1.4;">This takes me back to Saturday afternoons</p>          </div>        </div>      </div>            <div class="comment-item" data-comment-id="4" data-time="8" style="padding: 12px 0; border-bottom: 1px solid rgba(255,255,255,0.1);">        <div style="display: flex; gap: 12px;">          <div style="width: 36px; height: 36px; background: #e91e63; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 16px; font-weight: 600; color: white; flex-shrink: 0;">V</div>          <div style="flex: 1;">            <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px;">              <span style="color: #f1f1f1; font-size: 13px; font-weight: 500;">@VirtuallyVibe</span>              <a href="#" class="comment-time-link" data-time="8" style="color: #3ea6ff; font-size: 12px; text-decoration: none;">0:08</a>            </div>            <p style="color: #f1f1f1; font-size: 14px; margin: 0; line-height: 1.4;">HERE COMES THE BEST PART!! 🔥🔥🔥</p>          </div>        </div>      </div>            <div class="comment-item" data-comment-id="5" data-time="9" style="padding: 12px 0; border-bottom: 1px solid rgba(255,255,255,0.1);">        <div style="display: flex; gap: 12px;">          <div style="width: 36px; height: 36px; background: #00bcd4; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 16px; font-weight: 600; color: white; flex-shrink: 0;">D</div>          <div style="flex: 1;">            <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px;">              <span style="color: #f1f1f1; font-size: 13px; font-weight: 500;">@DanceCat</span>              <a href="#" class="comment-time-link" data-time="9" style="color: #3ea6ff; font-size: 12px; text-decoration: none;">0:09</a>            </div>            <p style="color: #f1f1f1; font-size: 14px; margin: 0; line-height: 1.4;">My cat literally stopped what he was doing to dance</p>          </div>        </div>      </div>            <div class="comment-item" data-comment-id="6" data-time="10" style="padding: 12px 0; border-bottom: 1px solid rgba(255,255,255,0.1);">        <div style="display: flex; gap: 12px;">          <div style="width: 36px; height: 36px; background: #795548; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 16px; font-weight: 600; color: white; flex-shrink: 0;">B</div>          <div style="flex: 1;">            <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px;">              <span style="color: #f1f1f1; font-size: 13px; font-weight: 500;">@BeatDropper</span>              <a href="#" class="comment-time-link" data-time="10" style="color: #3ea6ff; font-size: 12px; text-decoration: none;">0:10</a>            </div>            <p style="color: #f1f1f1; font-size: 14px; margin: 0; line-height: 1.4;">This drop hits different at 2x speed 😤</p>          </div>        </div>      </div>            <div class="comment-item" data-comment-id="7" data-time="13" style="padding: 12px 0; border-bottom: 1px solid rgba(255,255,255,0.1);">        <div style="display: flex; gap: 12px;">          <div style="width: 36px; height: 36px; background: #4ecdc4; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 16px; font-weight: 600; color: white; flex-shrink: 0;">M</div>          <div style="flex: 1;">            <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px;">              <span style="color: #f1f1f1; font-size: 13px; font-weight: 500;">@MemeMaster</span>              <a href="#" class="comment-time-link" data-time="13" style="color: #3ea6ff; font-size: 12px; text-decoration: none;">0:13</a>            </div>            <p style="color: #f1f1f1; font-size: 14px; margin: 0; line-height: 1.4;">POV: It's 2008 and you're spending your allowance on Wii Points 🥲</p>          </div>        </div>      </div>    </div>  </div>  </div>  </div>    <div class="code-sandbox-chin">    <div class="code-sandbox-brand">      <!-- Light mode logo -->      <svg class="code-sandbox-logo code-sandbox-logo-light" width="242" height="249" viewBox="0 0 242 249" fill="none" xmlns="http://www.w3.org/2000/svg">        <path d="M124.64 0C167.003 0 188.185 0.000318576 204.189 8.63574C216.552 15.3064 226.694 25.4477 233.364 37.8105C242 53.8148 242 74.9968 242 117.36V131.64C242 174.003 242 195.185 233.364 211.189C226.694 223.552 216.552 233.694 204.189 240.364C188.185 249 167.003 249 124.64 249H117.36C74.9968 249 53.8148 249 37.8105 240.364C25.4477 233.694 15.3064 223.552 8.63574 211.189C0.000317729 195.185 0 174.003 0 131.64V117.36C0 74.9968 0.000318576 53.8148 8.63574 37.8105C15.3064 25.4477 25.4477 15.3064 37.8105 8.63574C53.8148 0.000318576 74.9968 0 117.36 0H124.64ZM30 136C25.0294 136 21 140.029 21 145V183.357C21.0001 208.013 40.9872 228 65.6426 228C68.6012 228 71 225.601 71 222.643V166C71 149.431 57.5685 136 41 136H30ZM128.791 199.651C124.303 195.82 117.697 195.82 113.209 199.651L98.5615 212.155C92.1999 217.586 96.04 228 104.404 228H137.596C145.96 228 149.8 217.586 143.438 212.155L128.791 199.651ZM201 136C184.431 136 171 149.431 171 166V222.643C171 225.601 173.399 228 176.357 228C201.013 228 221 208.013 221 183.357V145C221 140.029 216.971 136 212 136H201ZM67.4287 21C41.7869 21 21 41.7869 21 67.4287C21.0001 70.5056 23.4944 72.9999 26.5713 73H52C76.8528 73 97 93.1472 97 118V177.506C97 179.533 99.4511 180.549 100.885 179.115C111.994 168.006 130.006 168.006 141.115 179.115C142.549 180.549 145 179.533 145 177.506V118C145 93.1472 165.147 73 190 73H215.429C218.506 72.9999 221 70.5056 221 67.4287C221 41.7869 200.213 21 174.571 21H67.4287Z" fill="currentColor"/>      </svg>      <!-- Dark mode logo -->      <svg class="code-sandbox-logo code-sandbox-logo-dark" width="200" height="207" viewBox="0 0 200 207" fill="none" xmlns="http://www.w3.org/2000/svg">        <path d="M20 115C36.5685 115 50 128.431 50 145V201.643C50 204.601 47.6012 207 44.6426 207C19.9872 207 0.000146651 187.013 0 162.357V124C2.96367e-06 119.029 4.02944 115 9 115H20ZM92.209 178.651C96.6967 174.82 103.303 174.82 107.791 178.651L122.438 191.155C128.8 196.586 124.96 207 116.596 207H83.4043C75.04 207 71.1999 196.586 77.5615 191.155L92.209 178.651ZM191 115C195.971 115 200 119.029 200 124V162.357C200 187.013 180.013 207 155.357 207C152.399 207 150 204.601 150 201.643V145C150 128.431 163.431 115 180 115H191ZM153.571 0C179.213 1.12084e-06 200 20.7869 200 46.4287C200 49.5056 197.506 51.9999 194.429 52H169C144.147 52 124 72.1472 124 97V156.506C124 158.533 121.549 159.549 120.115 158.115C109.006 147.006 90.994 147.006 79.8848 158.115C78.4511 159.549 76 158.533 76 156.506V97C76 72.1472 55.8528 52 31 52H5.57129C2.49438 51.9999 7.13985e-05 49.5056 0 46.4287C1.12084e-06 20.7869 20.7869 -1.12084e-06 46.4287 0H153.571Z" fill="currentColor"/>      </svg>      <span>YouTube Timecode Comments Demo</span>    </div>    <div class="code-sandbox-toggle active"          tabindex="0"          role="switch"          aria-checked="true"></div>  </div></div><script data-sandbox-init="sandbox-r9979ygpu">// Initialize this specific sandbox with options(function() {  // Store initialization function globally for reuse  window.sandboxInitializers = window.sandboxInitializers || {};    window.sandboxInitializers['sandbox-r9979ygpu'] = function() {    const wrapper = document.querySelector('[data-sandbox-id="sandbox-r9979ygpu"]');    if (!wrapper || wrapper.codeSandbox) return false;        const options = {      autoToggleOnScroll: true,      suspendOnHide: true,      resetOnShow: false    };        // Allow content to define custom handlers    if (window.sandboxHandlers && window.sandboxHandlers['sandbox-r9979ygpu']) {      Object.assign(options, window.sandboxHandlers['sandbox-r9979ygpu']);    }        new CodeSandbox(wrapper, options);    return true;  };    // Try to initialize immediately  function tryInit() {    if (typeof CodeSandbox !== 'undefined') {      window.sandboxInitializers['sandbox-r9979ygpu']();      return true;    }    return false;  }    if (!tryInit()) {    // Wait for CodeSandbox to be available    const checkInterval = setInterval(() => {      if (tryInit()) {        clearInterval(checkInterval);      }    }, 100);        // Give up after 5 seconds    setTimeout(() => clearInterval(checkInterval), 5000);  }})();</script><style>/* Default cursor for the prototype (non-interactive areas) */.youtube-demo {  cursor: url('/cursors/default.svg') 10 6, default;}/* Apply default cursor to all elements within the prototype */.youtube-demo * {  cursor: inherit;}/* Force cursor refresh on hover with minimal transform */.youtube-demo button:hover,.youtube-demo a:hover,.youtube-demo .timeline-marker:hover,.youtube-demo .clickable:hover,.youtube-demo .menu-item:hover,.youtube-demo .comment-time-link:hover {  cursor: url('/cursors/pointer.svg') 8 4, pointer;  transform: translateZ(0); /* Force GPU layer for cursor refresh */}/* Clickable elements get the interactive cursor with blue dot */.youtube-demo button,.youtube-demo a,.youtube-demo .timeline-marker,.youtube-demo .play-btn,.youtube-demo .loop-btn,.youtube-demo .settings-btn,.youtube-demo .action-button,.youtube-demo .toggle-comments,.youtube-demo .comment-time-link,.youtube-demo .menu-item,.youtube-demo [role="button"],.youtube-demo [onclick],.youtube-demo input[type="submit"],.youtube-demo input[type="button"],.youtube-demo .clickable {  cursor: url('/cursors/pointer.svg') 8 4, pointer;}/* Text selection areas get text cursor */.youtube-demo input[type="text"],.youtube-demo textarea,.youtube-demo [contenteditable="true"],.youtube-demo .comment-input {  cursor: url('/cursors/text.svg') 15 15, text;}/* Draggable elements get grab cursor */.youtube-demo .progress-bar,.youtube-demo .progress-fill {  cursor: url('/cursors/grab.svg') 12 12, grab;}/* Disabled elements get not-allowed cursor */.youtube-demo button:disabled,.youtube-demo [disabled],.youtube-demo .disabled {  cursor: url('/cursors/disabled.svg') 15 15, not-allowed;  opacity: 0.5;}/* Light mode styles (default) */.youtube-demo .video-info-section,.youtube-demo .comments-section {  background: white;  color: black;}.youtube-demo .video-info-section h3,.youtube-demo .comments-section h4 {  color: black;}.youtube-demo .video-info-section > div > div {  color: #606060;}.youtube-demo .toggle-comments {  color: black;}.youtube-demo .comments-section .comment-item p,.youtube-demo .comments-section .comment-item span {  color: black !important;}.youtube-demo .comments-section .comment-input-box {  background: rgba(0,0,0,0.05) !important;}.youtube-demo .comments-section .comment-input {  color: black !important;}.youtube-demo .comments-section .comment-timecode {  color: #606060 !important;}.youtube-demo .comment-sort {  color: black;}/* Dark mode styles */@media (prefers-color-scheme: dark) {  .youtube-demo .video-info-section,  .youtube-demo .comments-section {    background: rgb(15, 15, 15);    color: white;  }    .youtube-demo .video-info-section h3,  .youtube-demo .comments-section h4 {    color: #f1f1f1;  }    .youtube-demo .video-info-section > div > div {    color: #aaa;  }    .youtube-demo .toggle-comments {    color: #f1f1f1;  }    .youtube-demo .comments-section .comment-item p,  .youtube-demo .comments-section .comment-item span {    color: #f1f1f1 !important;  }    .youtube-demo .comments-section .comment-input-box {    background: rgba(255,255,255,0.05) !important;  }    .youtube-demo .comments-section .comment-input {    color: #f1f1f1 !important;  }    .youtube-demo .comments-section .comment-timecode {    color: #aaa !important;  }    .youtube-demo .comment-sort {    color: #f1f1f1;    background: rgb(15, 15, 15) !important;    border-color: rgba(255,255,255,0.2) !important;  }    .youtube-demo .comment-sort option {    background: rgb(15, 15, 15);  }}/* YouTube-style controls fade */.youtube-demo .controls-wrapper {  position: absolute;  bottom: 0;  left: 0;  right: 0;  background: linear-gradient(transparent, rgba(0,0,0,0.9));  padding: 48px 12px 8px;  transition: opacity 0.3s ease;  opacity: 0;  z-index: 10;}.youtube-demo:hover .controls-wrapper,.youtube-demo.controls-visible .controls-wrapper {  opacity: 1;}/* Ensure image has no hover effects */.youtube-demo img {  transform: none !important;  transition: none !important;}/* Clean button styles */.youtube-demo button {  transition: opacity 0.15s ease;  outline: none;  box-shadow: none !important;  border: none !important;}.youtube-demo button:hover {  opacity: 0.8;}.youtube-demo button:focus {  outline: none;}.youtube-demo .menu-item:hover {  background: rgba(255,255,255,0.1);}.youtube-demo .progress-bar:hover .progress-fill::after {  width: 16px !important;  height: 16px !important;  right: -8px !important;}/* Timeline marker hover effects */.youtube-demo .timeline-marker {  transform-origin: center bottom;  transition: all 0.2s ease;  /* Ensure consistent positioning */  top: -6px !important;  height: 15px !important;  width: 4px !important;  vertical-align: baseline;}.youtube-demo .timeline-marker:hover {  transform: scale(1.2) translateY(0);  box-shadow: 0 0 8px rgba(255,235,59,0.6);}/* Removed hover requirement - comments show via JavaScript */.youtube-demo .timeline-tooltip {  transition: all 0.2s ease;  z-index: 1000;}/* SoundCloud-style comment component */.sc-comment {  position: absolute;  background: rgba(255,255,255,0.98);  color: #333;  padding: 8px 10px;  border-radius: 3px;  font-size: 12px;  max-width: 280px;  box-shadow: 0 2px 8px rgba(0,0,0,0.15);  opacity: 0;  pointer-events: none;  transition: all 0.2s ease;  white-space: normal;  line-height: 1.4;  bottom: 25px;  left: 50%;  transform: translateX(-50%);  cursor: pointer;}/* Glassomorphic iOS 16 tooltip style */.timeline-tooltip-minimal {  position: absolute;  display: flex;  align-items: center;  gap: 8px;  opacity: 0;  pointer-events: none;  transition: opacity 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94), transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94), left 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94), top 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);  z-index: 25; /* Above everything */  flex-shrink: 0;  margin: 0 8px;}.timeline-tooltip-minimal .tooltip-avatar {  width: 32px;  height: 32px;  border-radius: 50%;  display: flex;  align-items: center;  justify-content: center;  font-size: 14px;  font-weight: 600;  color: white;  flex-shrink: 0;  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);}.timeline-tooltip-minimal .tooltip-comment {  background: rgba(20, 20, 22, 0.75);  backdrop-filter: blur(20px) saturate(180%);  -webkit-backdrop-filter: blur(20px) saturate(180%);  color: rgba(255, 255, 255, 0.95);  padding: 6px 12px;  border-radius: 30px;  font-size: 13px;  font-weight: 500;  max-width: 240px;  white-space: nowrap;  overflow: hidden;  text-overflow: ellipsis;  cursor: pointer;  border: 1px solid rgba(255, 255, 255, 0.1);  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4),               0 2px 8px rgba(0, 0, 0, 0.2),              inset 0 1px 0 rgba(255, 255, 255, 0.1);}.timeline-tooltip-minimal:hover .tooltip-comment {  background: rgba(25, 25, 27, 0.85);  transform: translateY(-2px) scale(1.02);  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.5),               0 4px 12px rgba(0, 0, 0, 0.3),              inset 0 1px 0 rgba(255, 255, 255, 0.15);}/* Comment section styles */.comment-item {  transition: background 0.3s ease;}.comment-item.highlighted {  background: rgba(255,235,59,0.1) !important;  animation: highlightPulse 2s ease;}@keyframes highlightPulse {  0% { background: rgba(255,235,59,0.2); }  50% { background: rgba(255,235,59,0.1); }  100% { background: rgba(255,235,59,0.1); }}.comment-time-link {  background: rgba(62, 166, 255, 0.1);  padding: 2px 6px;  border-radius: 4px;  transition: all 0.15s ease;}.comment-time-link:hover {  background: rgba(62, 166, 255, 0.2);  text-decoration: none !important;}/* Countdown circle overlay */.countdown-overlay {  position: fixed;  top: 50%;  left: 50%;  transform: translate(-50%, -50%);  width: 80px;  height: 80px;  z-index: 9999;  pointer-events: none;}.countdown-circle {  width: 100%;  height: 100%;  transform: rotate(-90deg);}.countdown-circle circle {  fill: none;  stroke: rgba(255, 255, 255, 0.3);  stroke-width: 4;}.countdown-circle .progress {  stroke: #ff0000;  stroke-dasharray: 251.2;  stroke-dashoffset: 251.2;  animation: countdown 3s linear forwards;}@keyframes countdown {  to {    stroke-dashoffset: 0;  }}/* Position tooltips close to timeline */.youtube-demo .timeline-marker .timeline-tooltip {  bottom: 25px !important;}.sc-comment-header {  display: flex;  align-items: center;  gap: 8px;  margin-bottom: 4px;}.sc-comment-avatar {  width: 20px;  height: 20px;  border-radius: 50%;  display: flex;  align-items: center;  justify-content: center;  font-size: 10px;  font-weight: 600;  color: white;  flex-shrink: 0;}.sc-comment-username {  font-size: 11px;  color: #999;  font-weight: 500;}.sc-comment-time {  font-size: 11px;  color: #999;  margin-left: auto;}.sc-comment-text {  color: #333;  font-size: 12px;  line-height: 1.4;  word-break: break-word;}.sc-comment-arrow {  position: absolute;  bottom: -6px;  left: 50%;  transform: translateX(-50%);  width: 0;  height: 0;  border-left: 6px solid transparent;  border-right: 6px solid transparent;  border-top: 6px solid rgba(255,255,255,0.98);}/* Modern pulse animation */@keyframes modernPulse {  0%, 100% {    transform: scale(1);    opacity: 0.4;  }  50% {    transform: scale(1.5);    opacity: 0.2;  }}/* Comments section transitions */.comments-section {  transition: all 0.2s ease;  transform-origin: top;  overflow: hidden;  position: relative;  contain: layout style;}.comments-section.expanding {  animation: expandSection 0.2s ease forwards;}.comments-section.collapsing {  animation: collapseSection 0.15s ease forwards;}@keyframes expandSection {  from {    opacity: 0;    max-height: 0;  }  to {    opacity: 1;    max-height: 210px;  }}@keyframes collapseSection {  from {    opacity: 1;    max-height: 210px;  }  to {    opacity: 0;    max-height: 0;  }}/* Live demo indicator animations */@keyframes pillPulse {  0%, 100% {    transform: scale(1);    box-shadow: 0 0 0 0 rgba(0,255,136,0.1);  }  50% {    transform: scale(1.02);    box-shadow: 0 0 0 8px rgba(0,255,136,0.05);  }}@keyframes ledGlow {  0% {    box-shadow: 0 0 8px #00ff88, 0 0 16px rgba(0,255,136,0.4), inset 0 1px 1px rgba(255,255,255,0.3);  }  100% {    box-shadow: 0 0 12px #00ff88, 0 0 24px rgba(0,255,136,0.6), inset 0 1px 1px rgba(255,255,255,0.5);  }}@keyframes pulseRing {  0% {    transform: translate(-50%, -50%) scale(0.5);    opacity: 1;  }  100% {    transform: translate(-50%, -50%) scale(4);    opacity: 0;  }}</style><script>document.addEventListener('DOMContentLoaded', function() {  const demo = document.querySelector('.youtube-demo');  if (!demo) return; // Exit if demo not found    // Store GIF state  const gifImg = demo.querySelector('.video-gif');  const gifSrc = gifImg ? gifImg.src : null;  let gifPaused = false;    const playBtn = demo.querySelector('.play-btn');  const progressBar = demo.querySelector('.progress-bar');  const progressFill = demo.querySelector('.progress-fill');  const timeDisplay = demo.querySelector('.time-display');  const settingsBtn = demo.querySelector('.settings-btn');  const settingsMenu = demo.querySelector('.settings-menu');  const communityToggle = demo.querySelector('.community-toggle');  const comments = demo.querySelectorAll('.comment');  const timelineMarkers = demo.querySelectorAll('.timeline-marker');  const commentsSection = demo.querySelector('.comments-section');  const commentInput = demo.querySelector('.comment-input');  const commentTimecode = demo.querySelector('.comment-timecode');  const commentSubmit = demo.querySelector('.comment-submit');  const commentCancel = demo.querySelector('.comment-cancel');  const commentActions = demo.querySelector('.comment-actions');  const commentsList = demo.querySelector('.comments-list');  const toggleCommentsBtn = demo.querySelector('.toggle-comments');  const loopBtn = demo.querySelector('.loop-btn');  const tooltipContainer = demo.querySelector('.tooltip-container');  const commentSort = demo.querySelector('.comment-sort');    let playing = false;  let currentTime = 5; // Start at 0:05  let duration = 15; // 0:15 total  let playInterval = null;  let loopEnabled = true; // Enabled by default like YouTube Premium  let commentTimeouts = new Map();  let communityEnabled = true;    // Create a unique demo instance object attached to the demo element  demo.youtubeDemo = {    get playing() { return playing; },    get currentTime() { return currentTime; },    set currentTime(val) { currentTime = val; updateTime(); },    showControls: showControls,    resetCommunity: () => { communityEnabled = true; },    hideAllComments: hideAllComments  };    // Format time  function formatTime(seconds) {    const mins = Math.floor(seconds / 60);    const secs = Math.floor(seconds % 60);    return `${mins}:${secs.toString().padStart(2, '0')}`;  }    // Update time display  function updateTime() {    timeDisplay.textContent = `${formatTime(currentTime)} / ${formatTime(duration)}`;    const progress = (currentTime / duration) * 100;    progressFill.style.width = progress + '%';  }    // Show comment with stacking logic  function showComment(comment) {    if (!communityEnabled) return;        const commentTime = parseInt(comment.dataset.time);        // Find other comments that should be visible at the same time (within 5 seconds)    const nearbyComments = Array.from(comments).filter(c => {      const cTime = parseInt(c.dataset.time);      return Math.abs(cTime - commentTime) <= 5 && c.style.opacity !== '1';    });        // Hide all other comments that aren't nearby    comments.forEach(c => {      const cTime = parseInt(c.dataset.time);      if (Math.abs(cTime - commentTime) > 5) {        c.style.opacity = '0';        c.style.bottom = '80px'; // Reset to baseline        clearTimeout(commentTimeouts.get(c));      }    });        // Show up to 3 nearby comments with stacking    const visibleComments = nearbyComments.slice(0, 3);    visibleComments.forEach((c, index) => {      // Apply vertical stacking by adjusting bottom position      const baseBottom = 80; // Base position in pixels      const stackOffset = index * 40; // 40px vertical offset for each stacked comment            c.style.bottom = `${baseBottom + stackOffset}px`;            // Add subtle opacity and scale variation for depth      c.style.opacity = index === 0 ? '1' : (index === 1 ? '0.9' : '0.8');      c.style.transform = `translateX(-50%) scale(${1 - index * 0.05})`;      c.style.zIndex = 100 - index;            // Auto-hide after 7 seconds      const timeout = setTimeout(() => {        c.style.opacity = '0';        // Reset position        c.style.bottom = '80px';        c.style.transform = 'translateX(-50%)';        c.style.zIndex = '';      }, 7000);            commentTimeouts.set(c, timeout);    });  }    // Hide all comments/tooltips  function hideAllComments() {    // Hide all tooltips in the container    const tooltips = tooltipContainer.querySelectorAll('.timeline-tooltip-minimal');    tooltips.forEach(tooltip => {      tooltip.style.opacity = '0';      tooltip.style.pointerEvents = 'none';      clearTimeout(commentTimeouts.get(tooltip));    });        commentTimeouts.clear();  }    // Create tooltip for marker  function createTooltip(marker) {    const tooltip = document.createElement('div');    tooltip.className = 'timeline-tooltip-minimal';    tooltip.dataset.markerId = marker.dataset.time;        // Create avatar    const avatar = document.createElement('div');    avatar.className = 'tooltip-avatar';    const username = marker.dataset.username || '@User';    const initial = username.charAt(1) || username.charAt(0); // Skip @ if present    avatar.textContent = initial.toUpperCase();        // Generate avatar color based on username    const colors = ['#ff9800', '#ff6b6b', '#2196f3', '#e91e63', '#00bcd4', '#795548', '#4ecdc4'];    const colorIndex = username.charCodeAt(1) % colors.length;    avatar.style.background = colors[colorIndex];        // Create comment pill    const comment = document.createElement('div');    comment.className = 'tooltip-comment';    comment.textContent = marker.dataset.fullText || '';        tooltip.appendChild(avatar);    tooltip.appendChild(comment);    tooltipContainer.appendChild(tooltip);    return tooltip;  }    // Position tooltip relative to marker  function positionTooltip(tooltip, marker) {    const demoRect = demo.getBoundingClientRect();    const videoSection = demo.querySelector('div[style*="padding-bottom: 56.25%"]');    const videoRect = videoSection.getBoundingClientRect();    const controlsVisible = demo.classList.contains('controls-visible');    const controlsWrapper = demo.querySelector('.controls-wrapper');        // Ensure tooltip is in container    if (tooltip.parentElement !== tooltipContainer) {      tooltipContainer.appendChild(tooltip);    }        // Reset positioning    tooltip.style.position = 'absolute';        if (controlsVisible && marker) {      // When controls visible, position above the timeline marker      const markerRect = marker.getBoundingClientRect();      const progressBar = demo.querySelector('.progress-bar');      const progressBarRect = progressBar.getBoundingClientRect();      const containerRect = tooltipContainer.getBoundingClientRect();            // Get tooltip dimensions      tooltip.style.visibility = 'hidden';      tooltip.style.display = 'flex';      const tooltipRect = tooltip.getBoundingClientRect();      const tooltipWidth = tooltipRect.width;      const tooltipHeight = tooltipRect.height;      tooltip.style.visibility = '';            // Calculate position relative to container      const markerLeft = markerRect.left - containerRect.left + markerRect.width / 2;      const progressTop = progressBarRect.top - containerRect.top;            // Calculate horizontal position with bounds checking      let leftPos = markerLeft;      const minLeft = tooltipWidth/2 + 10;      const maxLeft = containerRect.width - tooltipWidth/2 - 10;            if (leftPos < minLeft) {        leftPos = minLeft;      } else if (leftPos > maxLeft) {        leftPos = maxLeft;      }            // Position above progress bar      tooltip.style.left = leftPos + 'px';      tooltip.style.top = (progressTop - tooltipHeight - 20) + 'px';      tooltip.style.transform = 'translateX(-50%)';    } else {      // When controls hidden, position at bottom of video (3px from bottom)      const containerRect = tooltipContainer.getBoundingClientRect();      const videoGif = demo.querySelector('.video-gif');      const videoRect = videoGif.getBoundingClientRect();            // Calculate position relative to container      const centerX = containerRect.width / 2;      const bottomY = (videoRect.bottom - containerRect.top) - 3; // 3px from bottom of video            // Get tooltip height for proper positioning      tooltip.style.visibility = 'hidden';      tooltip.style.display = 'flex';      const tooltipHeight = tooltip.getBoundingClientRect().height;      tooltip.style.visibility = '';            tooltip.style.left = centerX + 'px';      tooltip.style.top = (bottomY - tooltipHeight) + 'px';      tooltip.style.transform = 'translateX(-50%)';    }  }    // Open comments section and highlight specific comment  function openCommentsAndHighlight(commentId) {    // Show comments section    commentsSection.style.display = 'block';        // Remove existing highlights    document.querySelectorAll('.comment-item').forEach(item => {      item.classList.remove('highlighted');    });        // Find and highlight the specific comment    const targetComment = commentsSection.querySelector(`[data-comment-id="${commentId}"]`);    if (targetComment) {      targetComment.classList.add('highlighted');      // Scroll to comment      // Scroll within the comments section only      const commentsContainer = targetComment.closest('.comments-section');      if (commentsContainer) {        const containerRect = commentsContainer.getBoundingClientRect();        const targetRect = targetComment.getBoundingClientRect();        const scrollTop = targetRect.top - containerRect.top + commentsContainer.scrollTop - (containerRect.height / 2) + (targetRect.height / 2);        commentsContainer.scrollTop = scrollTop;      }    }  }    // Check for comments at current time  function checkComments() {    if (!communityEnabled) return;        // Show comments near current time    timelineMarkers.forEach(marker => {      const markerTime = parseInt(marker.dataset.time);      const timeDiff = currentTime - markerTime;            // Only show if we just passed this time (within 0.2 seconds)      if (timeDiff >= 0 && timeDiff < 0.2) {        // Hide all other comments first        hideAllComments();                // Get or create tooltip for this marker        let tooltip = tooltipContainer.querySelector(`[data-marker-id="${marker.dataset.time}"]`);        if (!tooltip) {          tooltip = createTooltip(marker);        }                // Position and show tooltip        positionTooltip(tooltip, marker);        tooltip.style.opacity = '1';        tooltip.style.pointerEvents = 'auto';                // Auto-hide after 3 seconds        const timeout = setTimeout(() => {          tooltip.style.opacity = '0';          tooltip.style.pointerEvents = 'none';        }, 3000);                commentTimeouts.set(tooltip, timeout);      }    });  }    // Timeline marker click handlers  timelineMarkers.forEach(marker => {    marker.addEventListener('click', (e) => {      e.stopPropagation();      const time = parseInt(marker.dataset.time);      currentTime = time;      updateTime();            if (communityEnabled) {        // Hide all other tooltips        hideAllComments();                // Get or create tooltip for this marker        let tooltip = tooltipContainer.querySelector(`[data-marker-id="${marker.dataset.time}"]`);        if (!tooltip) {          tooltip = createTooltip(marker);        }                // Position and show tooltip        positionTooltip(tooltip, marker);        tooltip.style.opacity = '1';        tooltip.style.pointerEvents = 'auto';                // Auto-hide after 3 seconds        const timeout = setTimeout(() => {          tooltip.style.opacity = '0';          tooltip.style.pointerEvents = 'none';        }, 3000);                commentTimeouts.set(tooltip, timeout);      }    });  });    // Add click handler to tooltips (use event delegation)  tooltipContainer.addEventListener('click', (e) => {    const tooltip = e.target.closest('.timeline-tooltip-minimal');    if (tooltip) {      e.stopPropagation();      const markerId = tooltip.dataset.markerId;      const marker = demo.querySelector(`.timeline-marker[data-time="${markerId}"]`);      if (marker && marker.dataset.commentId) {        openCommentsAndHighlight(marker.dataset.commentId);      }    }  });  // Control visibility timeout  let controlsTimeout = null;    function showControls() {    demo.classList.add('controls-visible');    clearTimeout(controlsTimeout);    controlsTimeout = setTimeout(() => {      if (playing) {        demo.classList.remove('controls-visible');      }    }, 3000);  }    // Watch for controls visibility changes and reposition all visible tooltips  const controlsObserver = new MutationObserver((mutations) => {    mutations.forEach((mutation) => {      if (mutation.type === 'attributes' && mutation.attributeName === 'class') {        // Reposition all visible tooltips        const visibleTooltips = tooltipContainer.querySelectorAll('.timeline-tooltip-minimal[style*="opacity: 1"]');        visibleTooltips.forEach(tooltip => {          const markerId = tooltip.dataset.markerId;          const marker = demo.querySelector(`.timeline-marker[data-time="${markerId}"]`);          if (marker) {            positionTooltip(tooltip, marker);          }        });      }    });  });    // Start observing the demo element for class changes  controlsObserver.observe(demo, {     attributes: true,     attributeFilter: ['class']   });    // Show controls on mouse move  demo.addEventListener('mousemove', () => {    showControls();  });    // Click on video to play/pause  const videoContainer = demo.querySelector('div[style*="padding-bottom: 56.25%"]');  if (videoContainer) {    videoContainer.addEventListener('click', (e) => {      // Don't trigger if clicking on controls or other interactive elements      if (e.target === videoContainer || e.target.classList.contains('video-gif')) {        playBtn.click();      }    });  }    // Play/pause  playBtn.addEventListener('click', () => {    // If at the end of video, restart from beginning    if (currentTime >= duration) {      currentTime = 0;      updateTime();      hideAllComments();    }        playing = !playing;    demo.dataset.playing = playing;        if (playing) {      // Change to pause icon      playBtn.innerHTML = `<svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">        <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>      </svg>`;            // Resume GIF      if (gifImg && gifPaused) {        gifImg.src = gifSrc;        gifPaused = false;      }            // Hide controls after 3 seconds      showControls();            // Start playback with requestAnimationFrame      let lastFrameTime = performance.now();            function animate(currentFrameTime) {        if (!playing) return;                // Calculate time elapsed since last frame        const deltaTime = (currentFrameTime - lastFrameTime) / 1000; // Convert to seconds        lastFrameTime = currentFrameTime;                if (currentTime < duration) {          currentTime += deltaTime;          updateTime();          checkComments();                    // Continue animation          playInterval = requestAnimationFrame(animate);        } else {          // End of video          if (loopEnabled) {            // Loop back to beginning            currentTime = 0;            updateTime();            hideAllComments();                        // Show controls briefly on loop            showControls();            setTimeout(() => {              if (playing) {                demo.classList.remove('controls-visible');              }            }, 1500);                        // Continue animation loop            playInterval = requestAnimationFrame(animate);          } else {            // Stop playback            playing = false;            playBtn.innerHTML = `<svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">              <path d="M8 5v14l11-7z"/>            </svg>`;            demo.classList.add('controls-visible');            demo.dataset.playing = 'false';                        // Pause GIF at the end            if (gifImg && !gifPaused) {              const canvas = document.createElement('canvas');              canvas.width = gifImg.naturalWidth || gifImg.width;              canvas.height = gifImg.naturalHeight || gifImg.height;              const ctx = canvas.getContext('2d');              ctx.drawImage(gifImg, 0, 0);              gifImg.src = canvas.toDataURL();              gifPaused = true;            }          }        }      }            // Start the animation      playInterval = requestAnimationFrame(animate);    } else {      // Change to play icon      playBtn.innerHTML = `<svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">        <path d="M8 5v14l11-7z"/>      </svg>`;      cancelAnimationFrame(playInterval);      demo.classList.add('controls-visible');            // Pause GIF by replacing with static frame      if (gifImg && !gifPaused) {        // Create canvas to capture current frame        const canvas = document.createElement('canvas');        canvas.width = gifImg.naturalWidth || gifImg.width;        canvas.height = gifImg.naturalHeight || gifImg.height;        const ctx = canvas.getContext('2d');        ctx.drawImage(gifImg, 0, 0);        gifImg.src = canvas.toDataURL();        gifPaused = true;      }    }  });    // Progress bar seek  progressBar.addEventListener('click', (e) => {    const rect = progressBar.getBoundingClientRect();    const percentage = (e.clientX - rect.left) / rect.width;    currentTime = duration * percentage;    updateTime();        // Check for comments at new position    hideAllComments();    setTimeout(checkComments, 100);  });    // Settings menu  settingsBtn.addEventListener('click', (e) => {    e.stopPropagation();    settingsMenu.style.display = settingsMenu.style.display === 'none' ? 'block' : 'none';  });    // Close settings when clicking outside  document.addEventListener('click', (e) => {    if (!settingsMenu.contains(e.target) && !settingsBtn.contains(e.target)) {      settingsMenu.style.display = 'none';    }  });    // Community Commentary toggle  communityToggle.addEventListener('click', (e) => {    e.stopPropagation();    communityEnabled = !communityEnabled;        const toggle = communityToggle.querySelector('.toggle');    const toggleBtn = toggle.querySelector('div');        if (communityEnabled) {      toggle.style.background = '#ffeb3b';      toggleBtn.style.left = '';      toggleBtn.style.right = '2px';    } else {      toggle.style.background = 'rgba(255,255,255,0.3)';      toggleBtn.style.left = '2px';      toggleBtn.style.right = '';      hideAllComments();    }  });    // Community Commentary is the only menu item now    // Comment input handling  if (commentInput) {    // Focus handler - expand the comment box    commentInput.addEventListener('focus', () => {      commentInput.rows = 2;      commentActions.style.display = 'flex';      // Update timecode when focusing on input      commentTimecode.textContent = `@ ${formatTime(currentTime)}`;    });        // Input handler    commentInput.addEventListener('input', () => {      const hasText = commentInput.value.trim().length > 0;      commentSubmit.disabled = !hasText;      commentSubmit.style.opacity = hasText ? '1' : '0.5';            // Auto-resize based on content      commentInput.style.height = 'auto';      commentInput.style.height = commentInput.scrollHeight + 'px';    });        // Cancel button handler    if (commentCancel) {      commentCancel.addEventListener('click', () => {        commentInput.value = '';        commentInput.rows = 1;        commentInput.style.height = 'auto';        commentActions.style.display = 'none';        commentSubmit.disabled = true;        commentSubmit.style.opacity = '0.5';        commentInput.blur();      });    }  }    // Submit comment  if (commentSubmit) {    commentSubmit.addEventListener('click', () => {      const text = commentInput.value.trim();      if (text) {        // Add new comment to the list        const newComment = document.createElement('div');        newComment.className = 'comment-item';        newComment.dataset.time = Math.floor(currentTime);        newComment.style.cssText = 'padding: 12px 0; border-bottom: 1px solid rgba(255,255,255,0.1);';                newComment.innerHTML = `          <div style="display: flex; gap: 12px;">            <div style="width: 36px; height: 36px; background: #673ab7; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 16px; font-weight: 600; color: white; flex-shrink: 0;">Y</div>            <div style="flex: 1;">              <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px;">                <span style="color: #f1f1f1; font-size: 13px; font-weight: 500;">@You</span>                <a href="#" class="comment-time-link" data-time="${Math.floor(currentTime)}" style="color: #3ea6ff; font-size: 12px; text-decoration: none;">${formatTime(currentTime)}</a>              </div>              <p style="color: #f1f1f1; font-size: 14px; margin: 0; line-height: 1.4;">${text}</p>            </div>          </div>        `;                // Add to comments list        commentsList.appendChild(newComment);                // Clear and collapse input        commentInput.value = '';        commentInput.rows = 1;        commentInput.style.height = 'auto';        commentActions.style.display = 'none';        commentSubmit.disabled = true;        commentSubmit.style.opacity = '0.5';        commentInput.blur();                // Show comments section if hidden        if (commentsSection.style.display === 'none') {          commentsSection.style.display = 'block';        }                // Highlight new comment        newComment.classList.add('highlighted');        // Scroll within the comments section only        const commentsContainer = newComment.closest('.comments-section');        if (commentsContainer) {          const containerRect = commentsContainer.getBoundingClientRect();          const targetRect = newComment.getBoundingClientRect();          const scrollTop = targetRect.top - containerRect.top + commentsContainer.scrollTop - (containerRect.height / 2) + (targetRect.height / 2);          commentsContainer.scrollTop = scrollTop;        }      }    });  }    // Sort comments function  function sortComments(sortBy) {    const commentsContainer = commentsList;    const comments = Array.from(commentsContainer.querySelectorAll('.comment-item'));        comments.sort((a, b) => {      if (sortBy === 'newest') {        // Reverse order for newest first (comment 7 first, comment 1 last)        return parseInt(b.dataset.commentId) - parseInt(a.dataset.commentId);      } else {        // By timecode (ascending)        return parseInt(a.dataset.time) - parseInt(b.dataset.time);      }    });        // Clear and re-append in new order    commentsContainer.innerHTML = '';    comments.forEach(comment => commentsContainer.appendChild(comment));  }    // Comment sort dropdown handler  if (commentSort) {    commentSort.addEventListener('change', (e) => {      sortComments(e.target.value);    });        // Sort by newest on load    sortComments('newest');  }    // Update timecode display periodically  setInterval(() => {    if (commentInput && document.activeElement === commentInput) {      commentTimecode.textContent = `@ ${formatTime(currentTime)}`;    }  }, 100);    // Loop button  if (loopBtn) {    loopBtn.addEventListener('click', () => {      loopEnabled = !loopEnabled;      loopBtn.style.opacity = loopEnabled ? '1' : '0.7';      loopBtn.style.color = loopEnabled ? '#ff0000' : 'rgba(255,255,255,0.7)';    });  }    // Toggle comments button  if (toggleCommentsBtn) {    toggleCommentsBtn.addEventListener('click', () => {      const isHidden = commentsSection.style.display === 'none';            if (isHidden) {        commentsSection.style.display = 'block';        commentsSection.classList.remove('collapsing');        commentsSection.classList.add('expanding');        toggleCommentsBtn.style.background = 'rgba(255,255,255,0.1)';      } else {        commentsSection.classList.remove('expanding');        commentsSection.classList.add('collapsing');        setTimeout(() => {          commentsSection.style.display = 'none';        }, 150);        toggleCommentsBtn.style.background = 'transparent';      }    });  }    // Set up click handler for comment time links - ISOLATED TO THIS DEMO  demo.addEventListener('click', function(e) {    if (e.target.classList.contains('comment-time-link')) {      e.preventDefault();            const time = parseInt(e.target.dataset.time);            // Use the demo-specific youtubeDemo object      if (demo.youtubeDemo) {        // Set the time using the setter        demo.youtubeDemo.currentTime = time;                // Pause if playing          if (demo.youtubeDemo.playing && playBtn) {          playBtn.click();        }                // Show controls        if (demo.youtubeDemo.showControls) {          demo.youtubeDemo.showControls();        }                // Check for timeline tooltips at this time        setTimeout(() => {          const markers = demo.querySelectorAll('.timeline-marker');          markers.forEach(marker => {            if (parseInt(marker.dataset.time) === time) {              // Trigger mouseover to show tooltip              const event = new MouseEvent('mouseover', {                view: window,                bubbles: true,                cancelable: true              });              marker.dispatchEvent(event);            }          });        }, 100);      } else {        // Fallback: Update UI directly if youtubeDemo not available        const progress = (time / duration) * 100;        progressFill.style.width = progress + '%';                // Update time display        timeDisplay.textContent = `${formatTime(time)} / ${formatTime(duration)}`;                // Show controls        demo.classList.add('controls-visible');                // Pause if playing        if (demo.dataset.playing === 'true' && playBtn) {          playBtn.click();        }      }            // Highlight the clicked comment - only within THIS demo      const commentItem = e.target.closest('.comment-item');      if (commentItem) {        // Remove existing highlights only within this demo        demo.querySelectorAll('.comment-item').forEach(item => {          item.style.background = 'transparent';        });        // Add highlight to clicked comment        commentItem.style.background = 'rgba(62, 166, 255, 0.1)';        commentItem.style.borderRadius = '8px';        commentItem.style.transition = 'background 0.3s ease';      }    }  });    // Initialize  updateTime();  demo.classList.add('controls-visible'); // Start with controls visible    // Autoplay on load  setTimeout(() => {    playBtn.click();  }, 500);});// YouTube demo specific handlersdocument.addEventListener('DOMContentLoaded', function() {  // Find the youtube demo element  const youtubeDemo = document.querySelector('.youtube-demo');  if (!youtubeDemo) return;    // Find the parent code-sandbox-content div  const sandboxContent = youtubeDemo.closest('.code-sandbox-content');  if (!sandboxContent) return;    // The wrapper is the parent of content  const sandboxWrapper = sandboxContent.parentElement;    if (sandboxWrapper && sandboxWrapper.classList.contains('code-sandbox-wrapper')) {    // Listen for suspend event (when hiding)    sandboxContent.addEventListener('sandbox:suspend', function() {      const demo = youtubeDemo;      if (demo) {        // Pause the demo if it's playing        const playBtn = demo.querySelector('.play-btn');        if (demo.dataset.playing === 'true' && playBtn) {          playBtn.click();        }                // Cancel any animation frames used by the demo        if (demo.youtubeDemo && demo.youtubeDemo.playInterval) {          cancelAnimationFrame(demo.youtubeDemo.playInterval);        }      }    });        // Listen for resume event (when showing)    sandboxContent.addEventListener('sandbox:resume', function() {      const demo = youtubeDemo;      if (demo && demo.youtubeDemo) {        // Reset time to 5 seconds        demo.youtubeDemo.currentTime = 5;                // Ensure demo is paused initially        const playBtn = demo.querySelector('.play-btn');        if (demo.dataset.playing === 'true' && playBtn) {          playBtn.click();        }                // Reset controls visibility        demo.classList.add('controls-visible');                // Re-enable community commentary        demo.youtubeDemo.resetCommunity();        const communityToggle = demo.querySelector('.community-toggle');        if (communityToggle) {          const toggle = communityToggle.querySelector('.toggle');          const toggleBtn = toggle.querySelector('div');          toggle.style.background = '#ffeb3b';          toggleBtn.style.left = '';          toggleBtn.style.right = '2px';        }                // Hide all tooltips and comments        demo.youtubeDemo.hideAllComments();                // Restart autoplay after a delay        setTimeout(() => {          if (playBtn && demo.dataset.playing !== 'true') {            playBtn.click();          }        }, 500);      }    });  }});</script>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/06/25/YouTube-Timecode-Commentary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Old Notebooks New Inspiration</title>
      <link>https://twalichiewicz.github.io/2025/06/24/Old-Notebooks-New-Inspiration/</link>
      <guid>https://twalichiewicz.github.io/2025/06/24/Old-Notebooks-New-Inspiration/</guid>
      <pubDate>Tue, 24 Jun 2025 14:42:21 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Found a stack of my old design notebooks tucked away in a drawer today. Pages filled with sketches, half-formed ideas, and that particula</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Found a stack of my old design notebooks tucked away in a drawer today. Pages filled with sketches, half-formed ideas, and that particular kind of energy that comes from putting pen to paper without overthinking it.</p><p>There’s something about the tactile process of sketching that digital tools can’t quite replicate. The weight of the pencil, the texture of paper, the way ideas flow more freely when your hand is moving. Those notebooks captured a rawness and immediacy that made me want to bring some of that spirit back to my work.</p><p>Felt inspired enough to completely redo the Works page. Sometimes you need to look back to move forward.</p>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      <category domain="https://twalichiewicz.github.io/blog/tags/design/">design</category>
      
      <category domain="https://twalichiewicz.github.io/blog/tags/reflection/">reflection</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/06/24/Old-Notebooks-New-Inspiration/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>How creative mediums find their voice</title>
      <link>https://twalichiewicz.github.io/2025/06/19/How-creative-mediums-find-their-voice/</link>
      <guid>https://twalichiewicz.github.io/2025/06/19/How-creative-mediums-find-their-voice/</guid>
      <pubDate>Thu, 19 Jun 2025 14:30:00 GMT</pubDate>
      
      <description>When new tools arrive, we use them to do old things faster—until we discover what only they can do</description>
      
      
      
      <content:encoded><![CDATA[<p>As LinkedIn’s AI hacks flooded my feed, one pattern was impossible to miss: “Midjourney just gave me 50 logos.” “ChatGPT wrote all my button copy.” We’re in tech’s oldest loop—new tool, same tasks, just faster. It echoed a lesson from photography class: early photographers spent decades making photos look like paintings.</p><p>When photography was invented in 1839, practitioners pointed their cameras at the same subjects painters had captured for centuries. They used soft focus and hand-tinting, desperately trying to gain artistic legitimacy by mimicking the established medium. It took nearly 50 years before photographers like Alfred Stieglitz proclaimed that it was “high time that the stupidity and sham in pictorial photography be struck a solarplexus blow.”</p><p>Photography had to find its own voice—exactly the opportunity we face with AI.</p><p>This pattern repeats throughout history. Cinema spent its first decades as “filmed theater.” Early websites looked like printed newspapers. And today? We have revolutionary AI tools, but we’re mostly using them as faster interns. We’re repeating history, and we don’t even see it.</p><h2 id="The-four-phases-of-any-medium"><a href="#The-four-phases-of-any-medium" class="headerlink" title="The four phases of any medium"></a>The four phases of any medium</h2><p>Every creative medium follows the same predictable arc:</p><p><strong>Phase 1: Imitation</strong> - New tech mimics what came before<br><strong>Phase 2: Experimentation</strong> - Pioneers start breaking rules<br><strong>Phase 3: Unique Voice</strong> - The medium finds what only it can do<br><strong>Phase 4: Maturation</strong> - It transforms everything else</p><p>(These are rough historical averages, not laws of physics.)</p><p>Photography took 50 years to freeze time. Cinema needed 30 to discover editing. The web, 20 to go responsive.</p><p>VR still hunts for its freeze-time moment; LLMs have already had theirs (and they’re only getting louder).</p><h2 id="Most-of-us-are-stuck-in-Phase-1"><a href="#Most-of-us-are-stuck-in-Phase-1" class="headerlink" title="Most of us are stuck in Phase 1"></a>Most of us are stuck in Phase 1</h2><p>The evolution is happening faster than we think. In 2024, Figma found that <span class="stat-container"><span class="stat-number" data-value="72">72%</span> of teams said AI played only a minor role</span><sup><a href="#ref1">1</a></sup>. By mid-2025, <span class="stat-container"><span class="stat-number" data-value="64">64%</span> of those same teams had shipped at least one AI-powered feature</span>, up from <span class="stat-container"><span class="stat-number" data-value="28">28%</span> the year prior</span><sup><a href="#ref2">2</a></sup>. The 2025 State of AI in Design Report by Foundation Capital shows <span class="stat-container"><span class="stat-number" data-value="89">89%</span> of designers say AI has improved their workflow</span><sup><a href="#ref3">3</a></sup>. That’s not incremental progress. That’s a phase shift.</p><p>But here’s the pattern: <span class="stat-container"><span class="stat-number" data-value="84">84%</span> use AI for exploration</span>, while only <span class="stat-container"><span class="stat-number" data-value="39">39%</span> use it for final delivery</span><sup><a href="#ref3">3</a></sup>. Great at brainstorms and prototypes; timid with ship-ready work.</p><p>Those numbers suggest a mass migration from Phase 1 to early Phase 2, while a fringe is sprinting toward Phase 3 and beyond.</p><p>I deliberately switched from Swift to Rust, letting Claude mentor me 24&#x2F;7. A weekend’s grind collapsed into a single evening sprint. Not because AI was doing my work, but because it was translating between my design thinking and code syntax. Between what I could imagine and what I could build.</p><p>This wasn’t automation. It was amplification.</p><p>The speed of evolution is unprecedented. According to the same report, <span class="stat-container"><span class="stat-number" data-value="96">96%</span> of designers are self-taught in AI</span><sup><a href="#ref3">3</a></sup>, learning from peers and social posts rather than formal training. What took photography clubs months through quarterly journals happens in minutes on Reddit.</p><h2 id="The-adoption-curve-is-splitting"><a href="#The-adoption-curve-is-splitting" class="headerlink" title="The adoption curve is splitting"></a>The adoption curve is splitting</h2><p>Here’s what the data doesn’t capture: while most designers are using AI for “exploration,” a small group has already jumped to Phase 3 or 4.</p><p>I co-craft prompts in Discord channels where yesterday’s hacks ship as today’s SaaS. Like <a href="https://www.krea.ai/">Krea.ai</a>, where artists use real-time generation to paint with AI as a living brush (think Photoshop, but the brushstroke is generated in real time by the model). Or developers building entire SaaS products by describing functions rather than coding them—like Perplexity’s real-time custom agents.</p><p>The real evolution might be happening in the margins. Maybe prompt engineering <em>is</em> the new creative medium. Maybe the conversation itself—the back-and-forth between human intent and machine possibility—is the breakthrough. Six months ago I specced a chat-loop workflow that felt like sci-fi; this week, GPT-4o’s streaming API let me ship it in a day.</p><p>The implication hit harder than the code itself.</p><p>For the first time, I could imagine being a solo founder. Hitting “deploy” on a functioning SaaS by lunch made something click: it felt like having a team; the usual barriers just weren’t there.</p><p>(Yes, most weekend SaaS die—but the cost of trying has collapsed.)</p><p>That power is double-edged: models can hollow out junior roles. We won’t slow the shift, but we can shape governance and talent pipelines.</p><p>We’re so busy debating whether AI has found its voice that we’re missing the obvious: it already has. We just don’t have the vocabulary to describe it yet.</p><p>The teenagers know. The solo founders building million-dollar companies from their bedrooms know. The artists making AI hallucinate between realities know. They’re not waiting for AI to evolve. They’re already living in Phase 4.</p><p>Most teams are still polishing AI demo reels while Phase-4 builders ship features that were sci-fi in January. Ship a coffee-break prototype once and you can’t un-learn it.</p><p><strong>So, where are you on the curve?</strong></p><div class="references-section"><div class="references-list"><ol><li id="ref1">Figma's 2024 survey of 1,800 users. <a href="https://www.figma.com/blog/ai-design-figma-users-tell-us-whats-coming-next/">Full report</a>.</li><li id="ref2">Figma's 2025 AI Report. <a href="https://www.figma.com/reports/ai-2025/">Full report</a>.</li><li id="ref3">The 2025 State of AI in Design Report by Foundation Capital and Designer Fund. <a href="https://www.stateofaidesign.com">Full methodology</a>.</li></ol></div></div>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/06/19/How-creative-mediums-find-their-voice/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AutoMix expanded</title>
      <link>https://twalichiewicz.github.io/2025/06/18/AutoMix-expanded/</link>
      <guid>https://twalichiewicz.github.io/2025/06/18/AutoMix-expanded/</guid>
      <pubDate>Wed, 18 Jun 2025 21:48:20 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;#post-iOS-26-AutoMix&quot;&gt;Now that we have AutoMix&lt;/a&gt;, can I have it trigger when I hit the &lt;strong&gt;Next&lt;/strong&gt; button? &lt;/p&gt;
&lt;p&gt;D</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="#post-iOS-26-AutoMix">Now that we have AutoMix</a>, can I have it trigger when I hit the <strong>Next</strong> button? </p><p>Don’t punish me with an abrupt stop&#x2F;start between songs, queue up the next song in the background and then immediately start blending into the next song. If you still want to retain the current functionality just make a double-tap of the <strong>Next</strong> button expedite the transition to the next song (maybe even throw in a record-scratch sfx for good measure).</p><p><em>Update:</em> If you want to be really clever about the above mechanism, have the behavior adapt depending how much of the song the user has listened to– less than 3 sec played? Jump straight to the next song, they don’t want to hear any more of the current one.</p>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/06/18/AutoMix-expanded/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>agency-first tooling</title>
      <link>https://twalichiewicz.github.io/2025/06/17/agency-first-tooling/</link>
      <guid>https://twalichiewicz.github.io/2025/06/17/agency-first-tooling/</guid>
      <pubDate>Tue, 17 Jun 2025 02:03:12 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;You’ll know a tool is agency-first when your first keystroke is a question—and the canvas answers while legacy controls watch from the ma</description>
        
      
      
      
      <content:encoded><![CDATA[<p>You’ll know a tool is agency-first when your first keystroke is a question—and the canvas answers while legacy controls watch from the margins.</p>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/06/17/agency-first-tooling/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Preview of AI tooling post leaked</title>
      <link>https://twalichiewicz.github.io/2025/06/16/Preview-of-AI-tooling-post-leaked/</link>
      <guid>https://twalichiewicz.github.io/2025/06/16/Preview-of-AI-tooling-post-leaked/</guid>
      <pubDate>Mon, 16 Jun 2025 14:43:01 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Downside: accidentally posted a rough draft of my next long post early.&lt;/p&gt;
&lt;p&gt;Upside: found a weird drafts publishing bug, now fixed.&lt;/p</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Downside: accidentally posted a rough draft of my next long post early.</p><p>Upside: found a weird drafts publishing bug, now fixed.</p>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/06/16/Preview-of-AI-tooling-post-leaked/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>iOS 26 AutoMix</title>
      <link>https://twalichiewicz.github.io/2025/06/13/iOS-26-AutoMix/</link>
      <guid>https://twalichiewicz.github.io/2025/06/13/iOS-26-AutoMix/</guid>
      <pubDate>Fri, 13 Jun 2025 20:00:33 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;#post-Play-Next&quot;&gt;Thank you Apple Music design (&amp;amp; engineering) team.&lt;/a&gt;&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="#post-Play-Next">Thank you Apple Music design (&amp; engineering) team.</a></p>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/06/13/iOS-26-AutoMix/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rethinking mobile hardware interaction patterns</title>
      <link>https://twalichiewicz.github.io/2025/06/10/iOS-monobutton/</link>
      <guid>https://twalichiewicz.github.io/2025/06/10/iOS-monobutton/</guid>
      <pubDate>Tue, 10 Jun 2025 12:26:46 GMT</pubDate>
      
        
        
      <description>&lt;div class=&quot;post-alerts no-external-indicators&quot;&gt;&lt;a href=&quot;https://twalichiewicz.github.io/monophone-demo/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; cla</description>
        
      
      
      
      <content:encoded><![CDATA[<div class="post-alerts no-external-indicators"><a href="https://twalichiewicz.github.io/monophone-demo/" target="_blank" rel="noopener" class="alert-message alert-link alert-info">  <div class="alert-title external">Try the Monophone Demo</div>  <div class="alert-description">Interactive prototype demonstrating thumb-first navigation</div></a></div><p>Gaming handhelds are exploding, cars are bringing back physical knobs. Meanwhile iOS 26 simulates depth and physics on flat glass while every app converges on identical patterns: bottom nav, 3-4 actions, one primary control.</p><p>If “People who are really serious about software should make their own hardware.” still holds true, my mockup would show how you might invent the next interaction paradigm. </p><p><div class="carousel-error">Error loading carousel</div></p><p>One pressure-sensitive nub that:</p><ul><li>Becomes your primary action (whatever the app needs)</li><li>Provides actual texture for gesture control</li><li>Gives precise navigation without covering the screen</li><li>Press and hold and the camera passthrough with UI overlay opens a window to the world</li></ul><p>That perimeter edge? Not decoration. It’s the boundary between digital and physical, and your finger is the bridge.</p><p>This is the iPod wheel for the spatial computing age.</p><p>Steam Deck sales proved we’ll carry bigger devices for better controls. Teenage Engineering gets it. Spotify Thing gets it. Even Apple gets it—why else make everything look so touchable?</p><p>Sometimes the best interface innovation is admitting that software patterns aren’t just design decisions, they’re hardware opportunities waiting to be built.</p><p>Home button is back, baby. Just this time, we’re stepping out rather than in.</p>]]></content:encoded>
      
      
      
      <category domain="https://twalichiewicz.github.io/blog/tags/blog/">blog</category>
      
      
      <comments>https://twalichiewicz.github.io/2025/06/10/iOS-monobutton/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>

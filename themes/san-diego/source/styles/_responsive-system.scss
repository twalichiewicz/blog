// Modern responsive system using proper CSS cascade and container queries
// Replaces _responsive-layouts.scss with reduced !important usage
@use "sass:color";
@use "variables" as variables;
@use 'device-breakpoints';

// Container query support
@supports (container-type: inline-size) {
  .responsive-container {
    container-type: inline-size;
  }
}

// Portfolio grid mixin with better specificity
@mixin portfolio-grid-layout($columns: 3) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  grid-auto-rows: minmax(120px, auto);
  grid-auto-flow: row dense;
  gap: 8px;
  
  // Progressive enhancement for larger screens
  @media screen and (min-width: 480px) {
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
  }
}

// Portfolio item base styles
.portfolio-item {
  margin: 0;
  aspect-ratio: 1 / 1;
  
  // Cover image mode
  &[data-cover-image="true"] {
    position: relative;
    overflow: hidden;
    padding: 0;
    
    .portfolio-image {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      margin: 0;
      border-radius: 0;
      border: none;
      max-height: none;
      
      img,
      video {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
      }
      
      // Video-specific styles
      video[data-autoplay="true"] {
        &:not([data-playing="true"]) {
          background-color: rgb(0 0 0 / 10%);
        }
        
        &[data-loading="true"]::after {
          content: '';
          position: absolute;
          top: 50%;
          left: 50%;
          width: 20px;
          height: 20px;
          margin: -10px 0 0 -10px;
          border: 2px solid rgb(255 255 255 / 30%);
          border-top-color: rgb(255 255 255 / 80%);
          border-radius: 50%;
          animation: spin 1s linear infinite;
          z-index: 1;
        }
        
        &[title*="Click to play"]::before {
          content: 'â–¶';
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          color: rgb(255 255 255 / 80%);
          font-size: var(--font-size-2xl);
          text-shadow: 0 2px 4px rgb(0 0 0 / 50%);
          z-index: 2;
          opacity: 0;
          transition: opacity 0.3s ease;
        }
        
        &[title*="Click to play"]:hover::before {
          opacity: 1;
        }
      }
    }
    
    .portfolio-content {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: none;
      color: white;
      padding: 6px;
      z-index: 2;
      
      .company-byline {
        display: none;
      }
    }
  }
}

// Progressive mobile layout improvements
@media (max-width: variables.$mobile-breakpoint) {
  .portfolio-grid {
    @include portfolio-grid-layout(2);
    
    @media (max-width: 320px) {
      @include portfolio-grid-layout(1);
    }
  }
  
  // Mobile portfolio items
  .portfolio-item {
    &[data-cover-image="true"] {
      .portfolio-content {
        padding: 4px;
        font-size: var(--font-size-sm);
      }
    }
  }
}

// Tablet layout improvements
@media (min-width: variables.$tablet-breakpoint) and (max-width: variables.$desktop-breakpoint) {
  .portfolio-grid {
    @include portfolio-grid-layout(4);
  }
}

// Desktop layout improvements
@media (min-width: variables.$desktop-breakpoint) {
  .portfolio-grid {
    @include portfolio-grid-layout(5);
  }
}

// Layout component visibility management (replaces !important usage)
.layout-component {
  // Base visibility states
  &.hidden {
    display: none;
  }
  
  &.visible {
    display: block;
  }
  
  // Context-specific visibility
  &.mobile-only {
    @media (min-width: variables.$tablet-breakpoint) {
      display: none;
    }
  }
  
  &.desktop-only {
    @media (max-width: variables.$mobile-breakpoint) {
      display: none;
    }
  }
}

// Grid layout system for responsive components
.responsive-grid {
  display: grid;
  gap: 1rem;
  
  // Auto-fit grid with minimum column width
  &.auto-fit {
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  }
  
  // Auto-fill grid with fixed column count
  &.auto-fill {
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  }
  
  // Responsive column counts
  &.cols-1 { grid-template-columns: 1fr; }
  &.cols-2 { grid-template-columns: repeat(2, 1fr); }
  &.cols-3 { grid-template-columns: repeat(3, 1fr); }
  &.cols-4 { grid-template-columns: repeat(4, 1fr); }
  
  // Responsive breakpoint columns
  @media (max-width: variables.$mobile-breakpoint) {
    &.cols-sm-1 { grid-template-columns: 1fr; }
    &.cols-sm-2 { grid-template-columns: repeat(2, 1fr); }
  }
  
  @media (min-width: variables.$tablet-breakpoint) {
    &.cols-md-3 { grid-template-columns: repeat(3, 1fr); }
    &.cols-md-4 { grid-template-columns: repeat(4, 1fr); }
  }
  
  @media (min-width: variables.$desktop-breakpoint) {
    &.cols-lg-4 { grid-template-columns: repeat(4, 1fr); }
    &.cols-lg-5 { grid-template-columns: repeat(5, 1fr); }
    &.cols-lg-6 { grid-template-columns: repeat(6, 1fr); }
  }
}

// Flexbox utilities for responsive layouts
.responsive-flex {
  display: flex;
  
  &.wrap { flex-wrap: wrap; }
  &.nowrap { flex-wrap: nowrap; }
  &.column { flex-direction: column; }
  &.row { flex-direction: row; }
  
  &.justify-start { justify-content: flex-start; }
  &.justify-center { justify-content: center; }
  &.justify-end { justify-content: flex-end; }
  &.justify-between { justify-content: space-between; }
  &.justify-around { justify-content: space-around; }
  
  &.align-start { align-items: flex-start; }
  &.align-center { align-items: center; }
  &.align-end { align-items: flex-end; }
  &.align-stretch { align-items: stretch; }
  
  // Responsive flex direction
  @media (max-width: variables.$mobile-breakpoint) {
    &.mobile-column { flex-direction: column; }
    &.mobile-row { flex-direction: row; }
  }
  
  @media (min-width: variables.$tablet-breakpoint) {
    &.tablet-column { flex-direction: column; }
    &.tablet-row { flex-direction: row; }
  }
}

// Responsive spacing utilities
@for $i from 0 through 6 {
  .mt-#{$i} { margin-top: #{$i * 0.5}rem; }
  .mb-#{$i} { margin-bottom: #{$i * 0.5}rem; }
  .ml-#{$i} { margin-left: #{$i * 0.5}rem; }
  .mr-#{$i} { margin-right: #{$i * 0.5}rem; }
  .mx-#{$i} { 
    margin-left: #{$i * 0.5}rem; 
    margin-right: #{$i * 0.5}rem; 
  }
  .my-#{$i} { 
    margin-top: #{$i * 0.5}rem; 
    margin-bottom: #{$i * 0.5}rem; 
  }
  
  .pt-#{$i} { padding-top: #{$i * 0.5}rem; }
  .pb-#{$i} { padding-bottom: #{$i * 0.5}rem; }
  .pl-#{$i} { padding-left: #{$i * 0.5}rem; }
  .pr-#{$i} { padding-right: #{$i * 0.5}rem; }
  .px-#{$i} { 
    padding-left: #{$i * 0.5}rem; 
    padding-right: #{$i * 0.5}rem; 
  }
  .py-#{$i} { 
    padding-top: #{$i * 0.5}rem; 
    padding-bottom: #{$i * 0.5}rem; 
  }
}

// Keyframe animations
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

@keyframes fade-in {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slide-up {
  from {
    transform: translateY(100%);
  }
  to {
    transform: translateY(0);
  }
}

// Animation utilities
.animate-fade-in {
  animation: fade-in 0.3s ease-out;
}

.animate-slide-up {
  animation: slide-up 0.3s ease-out;
}

.animate-spin {
  animation: spin 1s linear infinite;
}

// Transform utilities
.transform {
  &.scale-105 { transform: scale(1.05); }
  &.scale-110 { transform: scale(1.1); }
  &.rotate-45 { transform: rotate(45deg); }
  &.rotate-90 { transform: rotate(90deg); }
  &.translate-y-1 { transform: translateY(-4px); }
  &.translate-y-2 { transform: translateY(-8px); }
}

// Responsive visibility utilities
.show-mobile {
  @media (min-width: variables.$tablet-breakpoint) {
    display: none;
  }
}

.hide-mobile {
  @media (max-width: variables.$mobile-breakpoint) {
    display: none;
  }
}

.show-tablet {
  display: none;
  @media (min-width: variables.$tablet-breakpoint) and (max-width: variables.$desktop-breakpoint) {
    display: block;
  }
}

.show-desktop {
  display: none;
  @media (min-width: variables.$desktop-breakpoint) {
    display: block;
  }
}
// Component Library Design Tokens
// These extend and complement the existing design system

@use '../../styles/variables' as *;

// ============================================
// Spacing Tokens (Component-specific)
// ============================================

// Component padding/margin scale
$component-spacing: (
  'none': 0,
  'xs': 4px,
  'sm': 8px,
  'md': 16px,
  'lg': 24px,
  'xl': 32px,
  'xxl': 48px
);

// Component gap scale (for flexbox/grid)
$component-gaps: (
  'tight': 4px,
  'compact': 8px,
  'default': 12px,
  'comfortable': 16px,
  'spacious': 24px
);

// ============================================
// Size Tokens (for components)
// ============================================

// Icon sizes
$icon-sizes: (
  'xs': 12px,
  'sm': 16px,
  'md': 20px,
  'lg': 24px,
  'xl': 32px
);

// Component heights (buttons, inputs, etc.)
$component-heights: (
  'sm': 32px,
  'md': 40px,
  'lg': 48px,
  'xl': 56px
);

// ============================================
// Border Radius Tokens
// ============================================

$border-radius: (
  'none': 0,
  'sm': 4px,
  'md': 8px,
  'lg': 12px,
  'xl': 16px,
  'pill': 9999px,
  'circle': 50%
);

// ============================================
// Shadow Tokens (extending existing)
// ============================================

$component-shadows: (
  'none': none,
  'xs': 0 1px 2px rgba(0, 0, 0, 0.05),
  'sm': 0 2px 4px rgba(0, 0, 0, 0.06),
  'md': 0 4px 8px rgba(0, 0, 0, 0.08),
  'lg': 0 8px 16px rgba(0, 0, 0, 0.1),
  'xl': 0 16px 32px rgba(0, 0, 0, 0.12),
  'inner': inset 0 1px 2px rgba(0, 0, 0, 0.06),
  'focus': 0 0 0 3px rgba($link-color, 0.2)
);

// Dark mode shadows
$component-shadows-dark: (
  'none': none,
  'xs': 0 1px 2px rgba(0, 0, 0, 0.2),
  'sm': 0 2px 4px rgba(0, 0, 0, 0.25),
  'md': 0 4px 8px rgba(0, 0, 0, 0.3),
  'lg': 0 8px 16px rgba(0, 0, 0, 0.35),
  'xl': 0 16px 32px rgba(0, 0, 0, 0.4),
  'inner': inset 0 1px 2px rgba(0, 0, 0, 0.2),
  'focus': 0 0 0 3px rgba($link-color-dark, 0.3)
);

// ============================================
// Transition Tokens
// ============================================

$transitions: (
  'fast': 150ms ease,
  'base': 200ms ease,
  'slow': 300ms ease,
  'slower': 500ms ease,
  'spring': 300ms cubic-bezier(0.68, -0.55, 0.265, 1.55),
  'bounce': 300ms cubic-bezier(0.34, 1.56, 0.64, 1),
  'smooth': 300ms cubic-bezier(0.4, 0, 0.2, 1)
);

// ============================================
// Z-Index Scale
// ============================================

$z-index: (
  'negative': -1,
  'base': 0,
  'raised': 10,
  'dropdown': 100,
  'sticky': 200,
  'overlay': 300,
  'modal': 400,
  'popover': 500,
  'tooltip': 600,
  'notification': 700,
  'max': 9999
);

// ============================================
// Component State Colors
// ============================================

$state-colors: (
  'info': (
    'light': hsl(201, 90%, 45%),
    'dark': hsl(201, 85%, 60%)
  ),
  'success': (
    'light': hsl(142, 70%, 45%),
    'dark': hsl(142, 65%, 55%)
  ),
  'warning': (
    'light': hsl(45, 95%, 50%),
    'dark': hsl(45, 90%, 60%)
  ),
  'error': (
    'light': hsl(0, 70%, 50%),
    'dark': hsl(0, 65%, 60%)
  )
);

// ============================================
// Opacity Scale
// ============================================

$opacity: (
  'transparent': 0,
  'barely-visible': 0.05,
  'faint': 0.1,
  'light': 0.25,
  'medium': 0.5,
  'heavy': 0.75,
  'nearly-opaque': 0.9,
  'opaque': 1
);

// ============================================
// Animation Durations
// ============================================

$durations: (
  'instant': 0ms,
  'fast': 150ms,
  'base': 200ms,
  'moderate': 300ms,
  'slow': 500ms,
  'deliberate': 700ms,
  'crawl': 1000ms
);

// ============================================
// Breakpoint Helpers (using existing)
// ============================================

$breakpoints: (
  'mobile': $mobile-breakpoint,
  'tablet': $tablet-breakpoint,
  'desktop': $desktop-breakpoint
);

// ============================================
// Typography Scale (component-specific)
// ============================================

$component-font-sizes: (
  'xs': 0.75rem,    // 12px
  'sm': 0.875rem,   // 14px
  'base': 1rem,     // 16px
  'lg': 1.125rem,   // 18px
  'xl': 1.25rem,    // 20px
  'xxl': 1.5rem     // 24px
);

$component-line-heights: (
  'tight': 1.25,
  'snug': 1.375,
  'normal': 1.5,
  'relaxed': 1.625,
  'loose': 2
);

$component-font-weights: (
  'normal': 400,
  'medium': 500,
  'semibold': 600,
  'bold': 700
);

// ============================================
// Focus Styles
// ============================================

@mixin focus-ring($color: $link-color, $offset: 2px, $width: 2px) {
  outline: $width solid $color;
  outline-offset: $offset;
  
  @media (prefers-color-scheme: dark) {
    outline-color: $link-color-dark;
  }
}

@mixin focus-visible {
  &:focus {
    outline: none;
  }
  
  &:focus-visible {
    @include focus-ring;
  }
}

// ============================================
// Helper Functions
// ============================================

// Get value from token map
@function token($map, $key) {
  @if map-has-key($map, $key) {
    @return map-get($map, $key);
  }
  @warn "Token '#{$key}' not found in #{$map}";
  @return null;
}

// Get spacing value
@function space($key: 'md') {
  @return token($component-spacing, $key);
}

// Get shadow value
@function shadow($key: 'md') {
  @return token($component-shadows, $key);
}

// Get radius value
@function radius($key: 'md') {
  @return token($border-radius, $key);
}

// Get transition value
@function transition($key: 'base') {
  @return token($transitions, $key);
}

// ============================================
// Utility Mixins
// ============================================

// Reset button styles
@mixin button-reset {
  appearance: none;
  background: none;
  border: none;
  border-radius: 0;
  color: inherit;
  cursor: pointer;
  display: inline-block;
  font: inherit;
  line-height: normal;
  margin: 0;
  padding: 0;
  text-align: inherit;
  text-decoration: none;
  user-select: none;
  -webkit-tap-highlight-color: transparent;
  
  &::-moz-focus-inner {
    border: 0;
    padding: 0;
  }
}

// Loading state
@mixin loading-state {
  cursor: wait;
  pointer-events: none;
  position: relative;
  
  &::after {
    content: '';
    position: absolute;
    inset: 0;
    background: inherit;
    opacity: 0.6;
    border-radius: inherit;
  }
}

// Disabled state
@mixin disabled-state {
  cursor: not-allowed;
  opacity: 0.6;
  pointer-events: none;
}

// Truncate text
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Multi-line truncate
@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Visually hidden but accessible
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Container query support with fallback
@mixin container($size: 'md') {
  @container (min-width: #{map-get($breakpoints, $size)}) {
    @content;
  }
  
  // Fallback for browsers without container query support
  @supports not (container-type: inline-size) {
    @media (min-width: map-get($breakpoints, $size)) {
      @content;
    }
  }
}
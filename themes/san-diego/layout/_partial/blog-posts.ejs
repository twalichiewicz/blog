<div id="postsContent" class="blog-list" role="tabpanel" aria-labelledby="tab-blog">
    <div class="column-title blog-column-title">Posts</div>
    
    <!-- Add search bar -->
    <div class="search-container">
        <div class="search-input-wrapper">
            <div class="search-icon">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M21 21l-4.35-4.35"/>
                    <path d="M15.5 10.5a5 5 0 1 0-10 0 5 5 0 0 0 10 0z"/>
                </svg>
            </div>
            <input type="text" id="postSearch" placeholder="Search words..." class="search-input" aria-label="Search blog posts">
            <button class="search-clear" aria-label="Clear search" style="display: none;">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="18" y1="6" x2="6" y2="18"/>
                    <line x1="6" y1="6" x2="18" y2="18"/>
                </svg>
            </button>
        </div>
        <button class="posts-only-button" data-filter="posts"><span class="button-text-full">Posts only</span></button>
    </div>
    
    <% if (blogPosts.length > 0) { %>
        <% blogPosts.forEach(function(post, index) { %>
            <% 
            // Generate unique post ID from title or use index
            const postId = 'post-' + (post.slug || post.title.toLowerCase().replace(/[^\w]+/g, '-') || index);
            
            // Determine if this is a long-form post (has <a> in h3 and long: true)
            const isLongPost = post.long === true && !post.type;
            const classNames = [];
            if (post.type === 'link') {
                classNames.push('post-link');
            }
            if (isLongPost) {
                classNames.push('post-long');
            }
            %>
            <% 
            // Check if this is a regular blog post (not link or short)
            const isRegularPost = !post.type && !post.short;
            %>
            
            <% if (isRegularPost) { %>
                <%# Use the Substack-style post-link partial for regular posts %>
                <%- partial('post-link', { post: post }) %>
            <% } else { %>
                <%# Keep existing rendering for link posts and short posts %>
                <% if (isLongPost) { %>
                    <a href="<%- url_for(post.path) %>" class="post-link-wrapper no-external-indicators">
                <% } %>
                <article class="post-list-item <%= classNames.join(' ') %>" id="<%= postId %>">
                    <div class="post-byline">
                        <%= date(post.date, 'MMMM D, YYYY') %> â€¢ 
                        <%= post.type === 'link' ? 'Link' : (post.short ? 'Musing' : 'Post') %>
                    </div>
                    <% if (post.type === 'link') { %>
                        <div class="link-share no-external-indicators">
                            <% if (post.content) { %>
                                <% 
                                // Strip script tags from link post content to prevent HTML breaking
                                const cleanContent = post.content
                                    .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
                                    .replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, '');
                                %>
                                <p><%- cleanContent %></p>
                            <% } %>
                            
                            <a href="<%= post.url %>" target="_blank" rel="noopener" class="post-list-item post-long post-link-wrapper <%= post.workspace_os_special ? 'workspace-os-starfield' : '' %>">
                                <% if (post.workspace_os_special) { %>
                                    <canvas class="starfield-canvas"></canvas>
                                    <style>
                                    /* WorkspaceOS starfield styling - always dark mode */
                                    .workspace-os-starfield,
                                    [data-theme="light"] .workspace-os-starfield,
                                    [data-theme="dark"] .workspace-os-starfield {
                                        position: relative;
                                        background: radial-gradient(ellipse at center, #0B1426 0%, #050B1A 70%, #000205 100%) !important;
                                        overflow: hidden;
                                        border: 1px solid rgba(255, 255, 255, 0.1) !important;
                                        min-height: 80px;
                                    }
                                    .starfield-canvas {
                                        position: absolute;
                                        top: 0;
                                        left: 0;
                                        width: 100%;
                                        height: 100%;
                                        pointer-events: none;
                                    }
                                    .workspace-os-starfield .link-text-group,
                                    [data-theme="light"] .workspace-os-starfield .link-text-group,
                                    [data-theme="dark"] .workspace-os-starfield .link-text-group {
                                        color: white !important;
                                        position: relative;
                                        z-index: 2;
                                    }
                                    .workspace-os-starfield .link-url,
                                    [data-theme="light"] .workspace-os-starfield .link-url,
                                    [data-theme="dark"] .workspace-os-starfield .link-url {
                                        color: rgba(255, 255, 255, 0.7) !important;
                                    }
                                    .workspace-os-starfield .external-icon,
                                    [data-theme="light"] .workspace-os-starfield .external-icon,
                                    [data-theme="dark"] .workspace-os-starfield .external-icon {
                                        color: white !important;
                                        background: rgba(255, 255, 255, 0.1) !important;
                                        border-color: rgba(255, 255, 255, 0.2) !important;
                                    }
                                    .workspace-os-starfield:hover .external-icon,
                                    [data-theme="light"] .workspace-os-starfield:hover .external-icon,
                                    [data-theme="dark"] .workspace-os-starfield:hover .external-icon {
                                        background: rgba(255, 255, 255, 0.2) !important;
                                        border-color: rgba(255, 255, 255, 0.3) !important;
                                    }
                                    /* Ensure hover states also maintain dark styling */
                                    .workspace-os-starfield:hover,
                                    [data-theme="light"] .workspace-os-starfield:hover,
                                    [data-theme="dark"] .workspace-os-starfield:hover {
                                        background: radial-gradient(ellipse at center, #0B1426 0%, #050B1A 70%, #000205 100%) !important;
                                    }
                                    </style>
                                    <script>
                                    (function() {
                                        const container = document.querySelector('.workspace-os-starfield');
                                        const canvas = document.querySelector('.workspace-os-starfield .starfield-canvas');
                                        if (!canvas || !container) return;
                                        
                                        const ctx = canvas.getContext('2d');
                                        let stars = [];
                                        const starCount = 40; // More stars for better warp effect
                                        let isWarping = false;
                                        let warpSpeed = 0;
                                        let targetWarpSpeed = 0;
                                        const maxWarpSpeed = 50;
                                        const warpAcceleration = 0.15; // How fast we enter/exit warp
                                        
                                        function setupCanvas() {
                                            const rect = canvas.getBoundingClientRect();
                                            const dpr = window.devicePixelRatio || 1;
                                            
                                            canvas.width = rect.width * dpr;
                                            canvas.height = rect.height * dpr;
                                            
                                            ctx.scale(dpr, dpr);
                                            
                                            // Recreate stars for new dimensions
                                            stars = [];
                                            const centerX = rect.width / 2;
                                            const centerY = rect.height / 2;
                                            
                                            for (let i = 0; i < starCount; i++) {
                                                // Position stars in 3D space (x, y, z)
                                                const angle = Math.random() * Math.PI * 2;
                                                const distance = Math.random() * Math.max(rect.width, rect.height);
                                                
                                                stars.push({
                                                    // Starting position
                                                    x: centerX + Math.cos(angle) * distance,
                                                    y: centerY + Math.sin(angle) * distance,
                                                    z: Math.random() * 1000, // Depth
                                                    // Store original position for warp calculations
                                                    originX: centerX + Math.cos(angle) * distance,
                                                    originY: centerY + Math.sin(angle) * distance,
                                                    // Star properties
                                                    baseSize: 0.3 + Math.random() * 0.7,
                                                    twinkleSpeed: 0.5 + Math.random() * 1.5,
                                                    twinkleOffset: Math.random() * Math.PI * 2,
                                                    brightness: 0.6 + Math.random() * 0.4,
                                                    speed: 0.5 + Math.random() * 1.5,
                                                    // Trail properties for warp effect
                                                    trail: []
                                                });
                                            }
                                        }
                                        
                                        function animate() {
                                            const rect = canvas.getBoundingClientRect();
                                            const centerX = rect.width / 2;
                                            const centerY = rect.height / 2;
                                            
                                            // Fade out instead of clear for trail effect during warp
                                            if (isWarping || warpSpeed > 0.1) {
                                                ctx.fillStyle = 'rgba(5, 11, 26, 0.3)';
                                                ctx.fillRect(0, 0, rect.width, rect.height);
                                            } else {
                                                ctx.clearRect(0, 0, rect.width, rect.height);
                                            }
                                            
                                            const time = Date.now() * 0.001;
                                            
                                            // Smoothly transition warp speed
                                            if (Math.abs(warpSpeed - targetWarpSpeed) > 0.1) {
                                                warpSpeed += (targetWarpSpeed - warpSpeed) * warpAcceleration;
                                            } else {
                                                warpSpeed = targetWarpSpeed;
                                            }
                                            
                                            stars.forEach(star => {
                                                // Move stars
                                                if (warpSpeed > 0) {
                                                    // Warp movement - stars fly past from center
                                                    const dx = star.x - centerX;
                                                    const dy = star.y - centerY;
                                                    const angle = Math.atan2(dy, dx);
                                                    const speed = star.speed * warpSpeed;
                                                    
                                                    star.x += Math.cos(angle) * speed;
                                                    star.y += Math.sin(angle) * speed;
                                                    
                                                    // Reset star if it goes off screen
                                                    const dist = Math.sqrt(dx * dx + dy * dy);
                                                    if (dist > Math.max(rect.width, rect.height)) {
                                                        const newAngle = Math.random() * Math.PI * 2;
                                                        const startDist = 10;
                                                        star.x = centerX + Math.cos(newAngle) * startDist;
                                                        star.y = centerY + Math.sin(newAngle) * startDist;
                                                        star.originX = star.x;
                                                        star.originY = star.y;
                                                    }
                                                } else {
                                                    // Return to original positions when not warping
                                                    star.x += (star.originX - star.x) * 0.1;
                                                    star.y += (star.originY - star.y) * 0.1;
                                                }
                                                
                                                // Calculate star appearance
                                                const twinkle = Math.sin(time * star.twinkleSpeed + star.twinkleOffset) * 0.3 + 0.7;
                                                const warpMultiplier = 1 + (warpSpeed / maxWarpSpeed) * 3; // Bigger during warp
                                                const currentSize = star.baseSize * twinkle * warpMultiplier;
                                                const opacity = star.brightness * twinkle;
                                                
                                                // Draw star trail during warp
                                                if (warpSpeed > 5) {
                                                    const trailLength = Math.min(warpSpeed * 2, 40);
                                                    const dx = star.x - centerX;
                                                    const dy = star.y - centerY;
                                                    const angle = Math.atan2(dy, dx);
                                                    
                                                    // Draw trail
                                                    ctx.strokeStyle = `rgba(255, 255, 255, ${opacity * 0.5})`;
                                                    ctx.lineWidth = currentSize * 2;
                                                    ctx.lineCap = 'round';
                                                    ctx.beginPath();
                                                    ctx.moveTo(star.x, star.y);
                                                    ctx.lineTo(
                                                        star.x - Math.cos(angle) * trailLength,
                                                        star.y - Math.sin(angle) * trailLength
                                                    );
                                                    ctx.stroke();
                                                }
                                                
                                                // Draw star
                                                ctx.fillStyle = `rgba(255, 255, 255, ${opacity})`;
                                                ctx.beginPath();
                                                ctx.arc(star.x, star.y, currentSize, 0, Math.PI * 2);
                                                ctx.fill();
                                                
                                                // Glow effect (enhanced during warp)
                                                if (star.baseSize > 0.8 && star.brightness > 0.9) {
                                                    const glowSize = warpSpeed > 0 ? 5 : 3;
                                                    ctx.fillStyle = `rgba(255, 255, 255, ${opacity * 0.05 * (1 + warpSpeed/maxWarpSpeed)})`;
                                                    ctx.beginPath();
                                                    ctx.arc(star.x, star.y, currentSize * glowSize, 0, Math.PI * 2);
                                                    ctx.fill();
                                                }
                                            });
                                            
                                            if (document.contains(canvas)) {
                                                requestAnimationFrame(animate);
                                            }
                                        }
                                        
                                        // Hover event handlers
                                        container.addEventListener('mouseenter', () => {
                                            isWarping = true;
                                            targetWarpSpeed = maxWarpSpeed;
                                        });
                                        
                                        container.addEventListener('mouseleave', () => {
                                            isWarping = false;
                                            targetWarpSpeed = 0;
                                        });
                                        
                                        // Touch support for mobile
                                        container.addEventListener('touchstart', () => {
                                            isWarping = true;
                                            targetWarpSpeed = maxWarpSpeed;
                                        });
                                        
                                        container.addEventListener('touchend', () => {
                                            isWarping = false;
                                            targetWarpSpeed = 0;
                                        });
                                        
                                        // Setup and start
                                        setupCanvas();
                                        animate();
                                        
                                        // Handle resize
                                        let resizeTimeout;
                                        window.addEventListener('resize', () => {
                                            clearTimeout(resizeTimeout);
                                            resizeTimeout = setTimeout(() => {
                                                setupCanvas();
                                            }, 100);
                                        });
                                    })();
                                    </script>
                                <% } %>
                                <div class="link-text-group">
                                    <%= post.title %>
                                    <div class="link-source">
                                        <span class="link-url"><%= new URL(post.url).hostname %></span>
                                    </div>
                                </div>
                                <span class="external-icon">â†—</span>
                            </a>
                        </div>
                    <% } else if (post.short) { %>
                        <%- post.content %>
                    <% } %>
                </article>
                <% if (isLongPost) { %>
                    </a>
                <% } %>
            <% } %>
            <% if (index < blogPosts.length - 1) { %>
                <hr class="post-separator">
            <% } %>
        <% }) %>
    <% } else { %>
        <!-- No posts to display -->
    <% } %>
</div>
<!DOCTYPE html>
<html>
<%- partial('_partial/head') %>
<body class="project-page">
	<script>
		// Redirect to homepage with project path
		(function() {
			const currentPath = window.location.pathname;
			const isDirectAccess = !document.referrer || !document.referrer.includes(window.location.origin);
			const isRefresh = window.performance && window.performance.navigation && window.performance.navigation.type === 1;
			
			// Redirect if accessing directly OR on refresh (not from within the site)
			if ((isDirectAccess || isRefresh) && currentPath !== '/') {
				// Redirect to homepage with project parameter
				window.location.href = '/?project=' + encodeURIComponent(currentPath) + '&tab=portfolio';
			}
		})();
	</script>
	
	<div class="page-transition-overlay"></div>
	<!-- Edge-to-edge wrapper -->
	<div class="project-edge-wrapper" id="main-content">
				<!-- Above the fold preview - 100vh -->
		<div class="above-the-fold-preview">
			<!-- Project navigation positioned absolutely -->
			<div class="project-navigation">
				<div class="project-mini-bio">
					<div class="button-stack">
						<a href="<%= url_for('/?tab=portfolio') %>" class="project-home-button" title="Home">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
								<path d="M11.47 3.84a.75.75 0 011.06 0l8.69 8.69a.75.75 0 101.06-1.06l-8.689-8.69a2.25 2.25 0 00-3.182 0l-8.69 8.69a.75.75 0 001.061 1.06l8.69-8.69z" />
								<path d="M12 5.432l8.159 8.159c.03.03.06.058.091.086v6.198c0 1.035-.84 1.875-1.875 1.875H15a.75.75 0 01-.75-.75v-4.5a.75.75 0 00-.75-.75h-3a.75.75 0 00-.75.75V21a.75.75 0 01-.75.75H5.625a1.875 1.875 0 01-1.875-1.875v-6.198a2.29 2.29 0 00.091-.086L12 5.43z" />
							</svg>
							<span>Home</span>
						</a>
					</div>
				</div>
			</div>
			<!-- Project trailer (single hero item) -->
			<div class="project-trailer-hero<%= !page.trailer && !page.cover_image ? ' hidden' : '' %>" id="trailerHero">
				<div class="trailer-content" id="trailerContent">
						<% if (page.trailer) { %>
							<% 
							// Handle both string and object trailer configurations
							const item = typeof page.trailer === 'string' 
								? { type: 'video', url: page.trailer }
								: page.trailer;
							%>
									<% if (item.type === 'video') { %>
										<% 
										const autoplay = item.autoplay !== false;
										const loop = item.loop !== false;
										const muted = item.muted !== false;
		                                
		                                let rawPosterPath = item.poster;
		                                if (rawPosterPath && rawPosterPath.length > 1 && rawPosterPath.startsWith('"') && rawPosterPath.endsWith('"')) {
		                                    rawPosterPath = rawPosterPath.substring(1, rawPosterPath.length - 1);
		                                }

		                                let galleryItemPosterPath = rawPosterPath;
		                                if (rawPosterPath && !rawPosterPath.startsWith('/') && !rawPosterPath.startsWith('http')) {
		                                    galleryItemPosterPath = page.path + rawPosterPath;
		                                }
		                                const finalPosterSrc = galleryItemPosterPath ? url_for(galleryItemPosterPath) : '';
										%>
										<video preload="auto" playsinline crossorigin="anonymous" <%= finalPosterSrc ? `poster="${finalPosterSrc}"` : '' %> <%= autoplay ? 'autoplay' : '' %> <%= loop ? 'loop' : '' %> <%= muted ? 'muted' : '' %> data-autoplay="true" style="pointer-events: none;">
											<% 
											let videoPath = item.url;
											if (item.url && !item.url.startsWith('/') && !item.url.startsWith('http')) {
												videoPath = page.path + item.url;
											}
											%>
											<source src="<%- url_for(videoPath) %>" type="video/webm">
											<p>Your browser does not support the video tag. <a href="<%- url_for(videoPath) %>" target="_blank">Download the video</a> instead.</p>
										</video>
									<% } else if (item.type === 'iframe') { %>
										<iframe src="<%= item.url %>" 
											frameborder="0"
											allowfullscreen
											allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
											loading="lazy"
											style="width: 100%; height: 100%; border: none;"
											title="<%= item.caption || 'Embedded content' %>">
										</iframe>
									<% } else { // Image type %>
										<%
		                                let galleryImagePath = item.url || item.src;
		                                if (galleryImagePath && !galleryImagePath.startsWith('/') && !galleryImagePath.startsWith('http')) {
		                                    galleryImagePath = page.path + galleryImagePath;
		                                }
		                                %>
										<img src="<%- url_for(galleryImagePath) %>" 
											alt="<%= item.caption || item.alt || page.title + ' - Hero image' %>"
											loading="lazy"
											decoding="async">
									<% } %>
									<% if (item.caption) { %>
										<div class="carousel-caption"><%= item.caption %></div>
									<% } %>
						<% } else if (page.cover_image) { %>
							<%
							// Use cover image as fallback
							let coverImagePath = page.cover_image;
							if (coverImagePath && !coverImagePath.startsWith('/') && !coverImagePath.startsWith('http')) {
								coverImagePath = page.path + coverImagePath;
							}
							%>
							<img src="<%- url_for(coverImagePath) %>" 
								alt="<%= page.title %> cover image"
								loading="lazy"
								decoding="async">
						<% } else { %>
							<div class="trailer-empty">
								<p>No trailer available</p>
							</div>
						<% } %>
				</div>
			</div>
			
			<!-- Above the fold content wrapper -->
			<div class="above-fold-content-wrapper">
				<!-- Project title -->
				<div class="project-title">
					<div class="project-company-title">
						<span class="project-category"><%- page.company %></span>
						<h2><%- page.title %></h2>
					</div>
					
					<!-- Read full story button and demo button moved here -->
					<div class="read-story-button-container">
						<% if (page.demo_url || page.demo_component) { %>
							<button class="demo-button" 
								<% if (page.demo_url) { %>
									data-demo-url="<%- page.demo_url %>"
								<% } %>
								<% if (page.demo_component) { %>
									data-demo-component="<%- page.demo_component %>"
								<% } %>
								id="demoBtn"
								style="display: none;">
								Demo
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
									<path d="M8 5v14l11-7z"/>
								</svg>
							</button>
						<% } %>
						<button class="read-story-button" id="scrollToFullStoryBtn">
							Read the full story
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
								<line x1="12" y1="5" x2="12" y2="19"></line>
								<polyline points="19 12 12 19 5 12"></polyline>
							</svg>
						</button>
					</div>
					
					<% if (page.byline) { %>
						<p class="project-byline"><%- page.byline %></p>
					<% } %>
				</div>
				
				<!-- Project impact stats -->
				<% if (page.stats && page.stats.length > 0) { %>
					<div class="project-impact-stats">
						<% page.stats.forEach(function(stat) { %>
							<div class="stat-item-wrapper">
								<div class="stat-item">
									<div class="stat-value"><%- stat.value %></div>
									<div class="stat-label stat-label--impact"><%- stat.label %></div>
								</div>
							</div>
						<% }); %>
					</div>
				<% } %>
			</div>
		</div>
		
		<!-- Full story content -->
		<div class="project-wrapper" id="full-story">
		<div class="project-content">
			<div class="project-details">
				<%- partial('_partial/project-tabs') %>
			</div>
		</div>

	</div>
	</div>

	<style>
		/* Page fade-in animation styles */
		.page-transition-overlay {
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background-color: #000;
			z-index: 9999;
			opacity: 1;
			transition: opacity 1s ease-out;
		}
		
		.page-transition-overlay.fade-out {
			opacity: 0;
		}
		
		html, body {
			height: 100%;
			margin: 0;
			padding: 0;
			overflow: auto;
			-webkit-overflow-scrolling: touch;
		}
		
		body {
			opacity: 0;
			transition: opacity 0.5s ease-in;
		}
		
		body.loaded {
			opacity: 1;
		}
		
		.project-wrapper {
			min-height: auto;
			transform: translateY(20px);
			transition: transform 0.8s cubic-bezier(0.16, 1, 0.3, 1), 
						opacity 0.8s cubic-bezier(0.16, 1, 0.3, 1);
			opacity: 0;
		}
		
		body.loaded .project-wrapper {
			transform: translateY(0);
			opacity: 1;
		}
		
		.project-navigation {
			transform: translateY(-10px);
			transition: transform 0.6s cubic-bezier(0.16, 1, 0.3, 1), 
						opacity 0.6s cubic-bezier(0.16, 1, 0.3, 1);
			opacity: 0;
		}
		
		body.loaded .project-navigation {
			transform: translateY(0);
			opacity: 1;
		}
	</style>

	<script>
		// Define scroll function for standalone pages (fallback if blog.js not loaded)
		function scrollToFullStory() {
			const fullStoryElement = document.getElementById('full-story');
			if (!fullStoryElement) {
				return;
			}
			
			// Simple scroll with smooth behavior
			fullStoryElement.scrollIntoView({ 
				behavior: 'smooth', 
				block: 'start' 
			});
		}

		// Make function globally available (for both standalone and dynamic contexts)
		if (!window.scrollToFullStory) {
			window.scrollToFullStory = scrollToFullStory;
		}

		// Set up scroll button for standalone pages
		function setupStandaloneScrollButton() {
			const button = document.getElementById('scrollToFullStoryBtn');
			if (button) {
				button.onclick = function(e) {
					e.preventDefault();
					window.scrollToFullStory();
				};
			}
			
		}
		
		// Demo button functionality
		function setupDemoButton(button) {
			button.addEventListener('click', function(e) {
				e.preventDefault();
				
				const demoUrl = button.getAttribute('data-demo-url');
				const demoComponent = button.getAttribute('data-demo-component');
				
				if (demoUrl) {
					// External demo - open in new window
					window.open(demoUrl, '_blank', 'noopener,noreferrer');
				} else if (demoComponent) {
					// Dynamic component demo
					loadDemoComponent(demoComponent);
				}
			});
		}
		
		// Load demo component
		function loadDemoComponent(componentName) {
			
			// Create fullscreen modal
			const modal = document.createElement('div');
			modal.className = 'demo-modal';
			modal.innerHTML = `
				<div class="demo-modal-overlay"></div>
				<div class="demo-modal-content">
					<button class="demo-modal-close" aria-label="Close demo">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
							<path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
						</svg>
					</button>
					<div class="demo-modal-body">
						<div class="demo-loading">Loading demo...</div>
					</div>
				</div>
			`;
			
			// Add modal to body
			document.body.appendChild(modal);
			document.body.classList.add('demo-modal-open');
			
			// Get the modal body for content
			const modalBody = modal.querySelector('.demo-modal-body');
			
			// Set up close button
			const closeBtn = modal.querySelector('.demo-modal-close');
			const overlay = modal.querySelector('.demo-modal-overlay');
			
			const closeModal = () => {
				document.body.classList.remove('demo-modal-open');
				modal.classList.add('closing');
				setTimeout(() => {
					modal.remove();
				}, 300);
			};
			
			closeBtn.addEventListener('click', closeModal);
			overlay.addEventListener('click', closeModal);
			
			// Handle escape key
			const handleEscape = (e) => {
				if (e.key === 'Escape') {
					closeModal();
					document.removeEventListener('keydown', handleEscape);
				}
			};
			document.addEventListener('keydown', handleEscape);
			
			// Load the demo component
			switch(componentName) {
				case 'interactive-prototype':
					loadInteractivePrototype(modalBody);
					break;
				case 'code-sandbox':
					loadCodeSandbox(modalBody);
					break;
				case 'figma-embed':
					loadFigmaEmbed(modalBody);
					break;
				default:
					// Try to load custom component
					loadCustomComponent(componentName, modalBody);
			}
		}
		
		// Example demo loaders
		function loadInteractivePrototype(container) {
			container.innerHTML = `
				<div class="demo-prototype">
					<iframe src="/demos/prototype.html" 
						frameborder="0" 
						allowfullscreen
						title="Interactive Prototype">
					</iframe>
				</div>
			`;
		}
		
		function loadCodeSandbox(container) {
			container.innerHTML = `
				<div class="demo-codesandbox">
					<iframe src="https://codesandbox.io/embed/" 
						frameborder="0" 
						allowfullscreen
						sandbox="allow-scripts allow-same-origin"
						title="Code Sandbox Demo">
					</iframe>
				</div>
			`;
		}
		
		function loadFigmaEmbed(container) {
			container.innerHTML = `
				<div class="demo-figma">
					<iframe src="https://www.figma.com/embed" 
						frameborder="0" 
						allowfullscreen
						title="Figma Prototype">
					</iframe>
				</div>
			`;
		}
		
		function loadCustomComponent(name, container) {
			// Load custom demo as iframe
			container.innerHTML = `
				<div class="demo-custom">
					<iframe src="/demos/${name}/" 
						frameborder="0" 
						allowfullscreen
						style="width: 100%; height: 100%;"
						title="${name} Demo">
					</iframe>
				</div>
			`;
			
			// Also dispatch event for any additional handlers
			const event = new CustomEvent('loadDemoComponent', {
				detail: { name, container }
			});
			document.dispatchEvent(event);
		}

		// Set up immediately or on DOM ready
		if (document.readyState === 'loading') {
			document.addEventListener('DOMContentLoaded', setupStandaloneScrollButton);
		} else {
			setupStandaloneScrollButton();
		}

		// Page fade-in animation
		document.addEventListener('DOMContentLoaded', function() {
			// Wait for images to load
			window.addEventListener('load', function() {
				// Add a slight delay before starting the animation
				setTimeout(function() {
					// Add loaded class to body
					document.body.classList.add('loaded');
					
					// Fade out the overlay
					const overlay = document.querySelector('.page-transition-overlay');
					overlay.classList.add('fade-out');
					
					// Remove overlay after animation completes
					setTimeout(function() {
						overlay.style.display = 'none';
					}, 1000);
				}, 400); // 400ms delay before starting the animation
			});
			
			// Fallback in case load event doesn't fire
			setTimeout(function() {
				document.body.classList.add('loaded');
				const overlay = document.querySelector('.page-transition-overlay');
				overlay.classList.add('fade-out');
				setTimeout(function() {
					overlay.style.display = 'none';
				}, 1000);
			}, 2000); // Fallback timeout
		});

		// Collapse/Expand functionality
		document.addEventListener('DOMContentLoaded', function() {
			const collapseButton = document.querySelector('.project-collapse-button');
			const projectMiniBio = document.querySelector('.project-mini-bio');
			
			if (collapseButton && projectMiniBio) {
				collapseButton.addEventListener('click', function() {
					projectMiniBio.classList.toggle('collapsed');
					const isCollapsed = projectMiniBio.classList.contains('collapsed');
					
					// Update button text and icon
					const buttonText = collapseButton.querySelector('span');
					if (buttonText) {
						buttonText.textContent = isCollapsed ? 'Expand' : 'Collapse';
					}
					
					// Update aria-label
					collapseButton.setAttribute('aria-label', 
						isCollapsed ? 'Expand navigation' : 'Collapse navigation'
					);
				});
			}
		});
	</script>
</body>
</html> 
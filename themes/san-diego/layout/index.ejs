<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title><%= config.title %><% if (config.subtitle) { %> | <%= config.subtitle %><% } %></title>
	<%- partial('_partial/head') %>
	<style>
		/* Fade-in animation styles */
		.page-transition-overlay {
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background-color: #000;
			z-index: 9999;
			opacity: 1;
			transition: opacity 1s ease-out;
		}
		
		.page-transition-overlay.fade-out {
			opacity: 0;
		}
		
		body {
			opacity: 0;
			transition: opacity 0.5s ease-in;
		}
		
		body.loaded {
			opacity: 1;
		}
	</style>
</head>
<body>
<!-- Page transition overlay -->
<div class="page-transition-overlay"></div>

<main class="blog">
    <div class="blog-header">
        <%- partial('_partial/profile-header') %>
    </div>
    <div class="blog-content">
        <div class="content-inner-wrapper">
            <div class="tabs-wrapper">
                <div class="mobile-tabs" role="tablist" aria-label="Content Sections">
                    <button class="tab-button active" data-type="blog" role="tab" aria-selected="true" aria-controls="postsContent" id="tab-blog">Words</button>
                    <button class="tab-button" data-type="portfolio" role="tab" aria-selected="false" aria-controls="projectsContent" id="tab-portfolio">Works</button>
                </div>
            </div>

            <% 
            // Separate posts and projects
            const allPosts = site.posts.toArray();
            const blogPosts = allPosts.filter(post => 
                post.tags && post.tags.toArray().some(tag => tag.name === 'blog')
            ).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

            const projectPosts = allPosts.filter(post => 
                post.tags && post.tags.toArray().some(tag => tag.name === 'portfolio')
            ).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
            %>

            <div class="content-wrapper">
                <%- partial('_partial/blog-posts', { blogPosts: blogPosts }) %>
                <%- partial('_partial/portfolio-projects', { projectPosts: projectPosts, config: config }) %>
            </div>
        </div>
    </div>
</main>

<%- partial('_partial/contact-modal') %>
<%- partial('_partial/impact-modal') %>

<script type="module" src="<%- url_for('js/blog.js') %>"></script>
<script src="<%- url_for('js/anchor-links.js') %>"></script>
<script src="<%- url_for('js/blog-init.js') %>"></script>

<script>
	// Page fade-in animation
	function initiatePageFadeIn() {
		// Ensure this runs only once if called multiple times rapidly
		if (document.body.classList.contains('fade-in-initialized')) {
			// If already loaded and overlay is gone, ensure body is opaque
			if (document.body.classList.contains('loaded') && 
			    (!document.querySelector('.page-transition-overlay') || document.querySelector('.page-transition-overlay').style.display === 'none')) {
				document.body.style.opacity = '1'; // Ensure body is visible if animation was completed
			}
			return;
		}
		document.body.classList.add('fade-in-initialized');

		let animationComplete = false;

		function completeAnimation() {
			if (animationComplete) return;
			animationComplete = true;

			document.body.classList.add('loaded');
			const overlay = document.querySelector('.page-transition-overlay');
			if (overlay) {
				overlay.classList.add('fade-out');
				setTimeout(function() {
					if (overlay) overlay.style.display = 'none';
				}, 1000); // Match CSS transition
			} else {
				// If somehow overlay is not there, ensure body is visible
				document.body.style.opacity = '1';
			}
		}

		// Wait for images to load (primary trigger)
		window.addEventListener('load', function() {
			setTimeout(completeAnimation, 800); // 800ms delay
		});
		
		// Fallback in case load event doesn't fire or is too slow
		setTimeout(completeAnimation, 3000); // Increased timeout
	}

	document.addEventListener('DOMContentLoaded', function() {
		initiatePageFadeIn();
	});

	window.addEventListener('pageshow', function(event) {
		if (event.persisted) {
            // Page is loaded from bfcache - reset animation state
			document.body.style.opacity = '0'; 
			document.body.classList.remove('loaded');
			document.body.classList.remove('fade-in-initialized'); // Allow re-initialization

			// Ensure overlay is visible again for the animation
			const overlay = document.querySelector('.page-transition-overlay');
			if (overlay) {
				overlay.style.display = 'block'; // Make it block first
				overlay.style.opacity = '1';     // Reset its opacity
				overlay.classList.remove('fade-out');
			}
			
			initiatePageFadeIn();
		}
	});

    // Glassmorphic effect for services promo
    // document.addEventListener('DOMContentLoaded', function() {
    //     const servicesPromo = document.querySelector('.services-promo');
        
    //     if (servicesPromo) {
    //         servicesPromo.addEventListener('mousemove', (e) => {
    //             const rect = servicesPromo.getBoundingClientRect();
    //             const x = e.clientX - rect.left;
    //             const y = e.clientY - rect.top;
                
    //             servicesPromo.style.setProperty('--mouse-x', `${x}px`);
    //             servicesPromo.style.setProperty('--mouse-y', `${y}px`);
    //         });

    //         // Make the entire promo clickable
    //         servicesPromo.addEventListener('click', (e) => {
    //             const link = servicesPromo.querySelector('.services-link');
    //             if (link && !e.target.closest('.services-link')) {
    //                 link.click();
    //             }
    //         });

    //         // Remove mouse position when leaving the element
    //         servicesPromo.addEventListener('mouseleave', () => {
    //             servicesPromo.style.setProperty('--mouse-x', '50%');
    //             servicesPromo.style.setProperty('--mouse-y', '50%');
    //         });
    //     }
    // });

    // Add search functionality
    // document.addEventListener('DOMContentLoaded', function() {
    //     const searchInput = document.getElementById('postSearch');
    //     const postItems = document.querySelectorAll('.post-list-item');
    //     const blogList = document.getElementById('postsContent');
        
    //     // Create no results message element
    //     const noResultsMessage = document.createElement('div');
    //     noResultsMessage.className = 'no-results-message';
    //     noResultsMessage.textContent = "Haven't written about that yet!";
    //     noResultsMessage.style.display = 'none';
    //     blogList.appendChild(noResultsMessage);
        
    //     searchInput.addEventListener('input', function(e) {
    //         const searchTerm = e.target.value.toLowerCase();
    //         let visibleCount = 0;
    //         const visiblePosts = [];
            
    //         // First, hide all separators
    //         const separators = document.querySelectorAll('.post-separator');
    //         separators.forEach(separator => separator.style.display = 'none');
            
    //         // Process posts and track visible ones
    //         postItems.forEach(function(post) {
    //             const title = post.querySelector('h3')?.textContent.toLowerCase() || '';
    //             const content = post.textContent.toLowerCase();
    //             const excerpt = post.querySelector('p')?.textContent.toLowerCase() || '';
                
    //             if (title.includes(searchTerm) || content.includes(searchTerm) || excerpt.includes(searchTerm)) {
    //                 post.style.display = '';
    //                 visibleCount++;
    //                 visiblePosts.push(post);
    //             } else {
    //                 post.style.display = 'none';
    //             }
    //         });
            
    //         // Show/hide no results message
    //         noResultsMessage.style.display = visibleCount === 0 ? 'block' : 'none';
            
    //         // Add separators between visible posts
    //         if (visibleCount > 0) {
    //             visiblePosts.forEach((post, index) => {
    //                 if (index < visiblePosts.length - 1) {
    //                     const separator = post.nextElementSibling;
    //                     if (separator && separator.classList.contains('post-separator')) {
    //                         separator.style.display = '';
    //                     }
    //                 }
    //             });
    //         }
    //     });
    // });

// Contact modal functionality is now handled in main.js

// Handle direct navigation to blog posts and projects via URL parameter
document.addEventListener('DOMContentLoaded', function() {
    // Check if we have a post or project parameter
    const urlParams = new URLSearchParams(window.location.search);
    const postPath = urlParams.get('post');
    const projectPath = urlParams.get('project');
    
    if (postPath || projectPath) {
        const path = postPath || projectPath;
        const isProject = !!projectPath;
        
        // Load the content
        setTimeout(function() {
            const blogContent = document.querySelector('.blog-content');
            if (blogContent && window.fetchAndDisplayContent) {
                // Switch to appropriate tab first
                if (window.mobileTabs && typeof window.mobileTabs.switchTab === 'function') {
                    window.mobileTabs.switchTab(isProject ? 'portfolio' : 'blog', true);
                }
                // Load the content
                window.fetchAndDisplayContent(path, false, isProject);
                
                // Clean up the URL to show the actual post/project path
                window.history.replaceState({ path: path, isDynamic: true, isProject: isProject }, '', path);
            }
        }, 500); // Small delay to ensure everything is initialized
    }
});
</script>
</body>
</html>
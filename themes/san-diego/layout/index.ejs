<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title><%= config.title %><% if (config.subtitle) { %> | <%= config.subtitle %><% } %></title>
	<%- partial('_partial/head') %>
	<style>
		/* Critical animations for loading screen */
		@keyframes fadeIn {
			from {
				opacity: 0;
				transform: translate(-50%, -50%) scale(0.95);
			}
			to {
				opacity: 1;
				transform: translate(-50%, -50%) scale(1);
			}
		}
		
		@keyframes spin {
			from { transform: rotate(0deg); }
			to { transform: rotate(360deg); }
		}
		/* Loading state management */
		/* CRITICAL: Override any body opacity from compiled CSS */
		body {
			opacity: 1 !important; /* Body must be visible for loading screen */
		}
		
		body:not(.loaded) {
			overflow: hidden;
		}
		
		/* Hide main content during loading, not the entire body */
		body:not(.loaded) .blog,
		body:not(.loaded) .skip-navigation {
			opacity: 0;
		}
		
		body.loaded .blog,
		body.loaded .skip-navigation {
			opacity: 1;
			transition: opacity 0.5s ease-in;
		}
		
		/* Fix loading screen positioning and ensure proper display */
		.loading-screen {
			position: fixed !important;
			top: 0 !important;
			left: 0 !important;
			width: 100% !important;
			height: 100% !important;
			background: #000 !important;
			display: flex !important;
			align-items: center !important;
			justify-content: center !important;
			z-index: 9999 !important;
			transition: opacity 0.3s ease-out !important;
		}
		
		.loading-screen.hidden {
			opacity: 0;
			pointer-events: none;
		}
		
		/* Fix loading container positioning */
		.loading-container {
			position: relative !important;
			width: 120px !important;
			height: 120px !important;
		}
		
		/* Fix skull positioning */
		.loading-skull {
			position: absolute !important;
			top: 50% !important;
			left: 50% !important;
			transform: translate(-50%, -50%) !important;
			width: 80px !important;
			height: 80px !important;
			/* Remove opacity override to allow animation */
			filter: invert(1) !important;
			animation: fadeIn 0.3s ease-out forwards !important;
		}
		
		/* Fix circular text positioning */
		.loading-screen .circular-text {
			position: absolute !important;
			top: 0 !important;
			left: 0 !important;
			width: 100% !important;
			height: 100% !important;
			transform: none !important;
			animation: spin 8s linear infinite !important;
		}
		
		/* Ensure text is visible */
		.loading-screen .circular-text text {
			fill: rgba(255, 255, 255, 0.4) !important;
			font-size: 8px !important;
			letter-spacing: 8px !important;
			text-transform: uppercase !important;
			font-family: monospace !important;
		}
	</style>
</head>
<body>
<!-- Inline loading screen for immediate rendering -->
<div class="loading-screen" style="position:fixed;top:0;left:0;width:100%;height:100%;background:#000;display:flex;align-items:center;justify-content:center;z-index:9999;">
    <div class="loading-container" style="position:relative;width:120px;height:120px;">
        <img src="/img/skully.svg" alt="Skull logo" class="loading-skull" style="position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);width:80px;height:80px;filter:invert(1);animation:fadeIn 0.3s ease-out forwards;" />
        <svg class="circular-text" viewBox="0 0 100 100" style="position:absolute;top:0;left:0;width:100%;height:100%;animation:spin 8s linear infinite;">
            <path id="textPath" d="M50,50 m-40,0 a40,40 0 1,1 80,0 a40,40 0 1,1 -80,0" fill="none"/>
            <text style="fill:rgba(255,255,255,0.4);font-size:8px;letter-spacing:8px;text-transform:uppercase;font-family:monospace;">
                <textPath href="#textPath">
                • L O A D I N G • ▼
                </textPath>
            </text>
        </svg>
    </div>
</div>

<%- partial('_partial/skip-navigation') %>

<main class="blog" id="main-content">
    <div class="blog-header">
        <%- partial('_partial/profile-header') %>
    </div>
    <div class="blog-content">
        <div class="content-inner-wrapper">
            <div class="tabs-wrapper">
                <div class="mobile-tabs" role="tablist" aria-label="Content Sections">
                    <button class="tab-button active" data-type="blog" role="tab" aria-selected="true" aria-controls="postsContent" id="tab-blog">Words</button>
                    <button class="tab-button" data-type="portfolio" role="tab" aria-selected="false" aria-controls="projectsContent" id="tab-portfolio">Works</button>
                </div>
            </div>

            <% 
            // Separate posts and projects
            const allPosts = site.posts.toArray();
            const blogPosts = allPosts.filter(post => 
                post.tags && post.tags.toArray().some(tag => tag.name === 'blog') && !post.draft
            ).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

            const projectPosts = allPosts.filter(post => 
                post.tags && post.tags.toArray().some(tag => tag.name === 'portfolio') && !post.draft
            ).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
            %>

            <div class="content-wrapper">
                <%- partial('_partial/blog-posts', { blogPosts: blogPosts }) %>
                <%- partial('_partial/portfolio-projects', { projectPosts: projectPosts, config: config }) %>
            </div>
        </div>
    </div>
</main>

<%- partial('_partial/contact-modal') %>
<%- partial('_partial/impact-modal') %>

<script type="module" src="<%- url_for('js/blog.js') %>"></script>
<script src="<%- url_for('js/portfolio-filters.js') %>"></script>
<script src="<%- url_for('js/blog-init.js') %>"></script>
<script src="<%- url_for('js/anchor-links-simple.js') %>"></script>

<script>
	// Simple loading screen management
	let isLoadingComplete = false;
	
	// Check for debug mode
	const urlParams = new URLSearchParams(window.location.search);
	const debugLoading = urlParams.get('debug-loading') === 'true';
	const loadingDelay = debugLoading ? 5000 : 300; // 5 seconds in debug mode
	
	// Log loading screen presence immediately
	console.log('Loading screen check:', {
		exists: !!document.querySelector('.loading-screen'),
		debugMode: debugLoading,
		visibility: document.querySelector('.loading-screen') ? window.getComputedStyle(document.querySelector('.loading-screen')).display : 'not found'
	});

	function hideLoadingScreen() {
		if (isLoadingComplete) return;
		isLoadingComplete = true;

		console.log('Hiding loading screen...');
		
		// Show body content
		document.body.classList.add('loaded');
		
		// Hide loading screen
		const loadingScreen = document.querySelector('.loading-screen');
		if (loadingScreen) {
			loadingScreen.classList.add('hidden');
			setTimeout(function() {
				loadingScreen.style.display = 'none';
			}, 300);
		}
	}

	// Multiple triggers to ensure loading screen hides
	document.addEventListener('DOMContentLoaded', function() {
		if (debugLoading) {
			console.log('DEBUG MODE: Loading screen will stay visible for 5 seconds');
		}
		console.log('DOM loaded, hiding loading screen in ' + loadingDelay + 'ms...');
		setTimeout(hideLoadingScreen, loadingDelay);
	});

	window.addEventListener('load', function() {
		if (!debugLoading) {
			console.log('Window loaded, hiding loading screen...');
			setTimeout(hideLoadingScreen, 100);
		}
	});

	// Safety fallback
	setTimeout(function() {
		if (debugLoading) {
			console.log('Debug mode complete, hiding loading screen...');
		} else {
			console.log('Safety timeout, forcing loading screen to hide...');
		}
		hideLoadingScreen();
	}, debugLoading ? 6000 : 2000);

	// Handle browser back/forward
	window.addEventListener('pageshow', function(event) {
		if (event.persisted) {
			console.log('Page from cache, hiding loading screen immediately...');
			hideLoadingScreen();
		}
	});
	// Handle direct navigation to blog posts and projects via URL parameter
	document.addEventListener('DOMContentLoaded', function() {
	    // Check if we have a post or project parameter
	    const urlParams = new URLSearchParams(window.location.search);
	    const postPath = urlParams.get('post');
	    const projectPath = urlParams.get('project');

	    if (postPath || projectPath) {
	        const path = postPath || projectPath;
	        const isProject = !!projectPath;
        
        // Load the content
        setTimeout(function() {
            const blogContent = document.querySelector('.blog-content');
            if (blogContent && window.fetchAndDisplayContent) {
                // Switch to appropriate tab first
                if (window.mobileTabs && typeof window.mobileTabs.switchTab === 'function') {
                    window.mobileTabs.switchTab(isProject ? 'portfolio' : 'blog', true);
                }
                // Load the content
                window.fetchAndDisplayContent(path, false, isProject);
                
                // Clean up the URL to show the actual post/project path
                window.history.replaceState({ path: path, isDynamic: true, isProject: isProject }, '', path);
            }
        }, 500); // Small delay to ensure everything is initialized
    }
});
</script>

<!-- Cloudflare Web Analytics -->
<script defer src='https://static.cloudflareinsights.com/beacon.min.js' data-cf-beacon='{"token": "e8fdac6a36f74464bcf2d55fbb7f0ca2"}'></script>
<!-- End Cloudflare Web Analytics -->
</body>
</html>